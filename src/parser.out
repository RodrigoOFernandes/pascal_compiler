Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CONST
    CONTINUE
    READLN
    TYPE
    WRITELN
    XOR

Grammar

Rule 0     S' -> program
Rule 1     program -> header SEMICOLON block DOT
Rule 2     header -> PROGRAM ID
Rule 3     block -> variable_declaration_part procedure_or_function statement_part
Rule 4     variable_declaration_part -> VAR variable_declaration_list
Rule 5     variable_declaration_part -> <empty>
Rule 6     variable_declaration_list -> variable_declaration variable_declaration_list
Rule 7     variable_declaration_list -> variable_declaration
Rule 8     variable_declaration -> id_list COLON type SEMICOLON
Rule 9     id_list -> ID
Rule 10    id_list -> ID COMMA id_list
Rule 11    procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function
Rule 12    procedure_or_function -> <empty>
Rule 13    proc_or_func_declaration -> procedure_declaration
Rule 14    proc_or_func_declaration -> function_declaration
Rule 15    procedure_declaration -> procedure_heading SEMICOLON block
Rule 16    procedure_heading -> PROCEDURE ID
Rule 17    procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN
Rule 18    function_declaration -> function_heading SEMICOLON block
Rule 19    function_heading -> FUNCTION type
Rule 20    function_heading -> FUNCTION ID COLON type
Rule 21    function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type
Rule 22    parameter_list -> parameter COMMA parameter_list
Rule 23    parameter_list -> parameter
Rule 24    parameter -> ID COLON type
Rule 25    type -> REAL
Rule 26    type -> INTEGER
Rule 27    type -> BOOLEAN
Rule 28    type -> STRING
Rule 29    type -> array_type
Rule 30    array_type -> ARRAY LBRACKET range RBRACKET OF type
Rule 31    range -> expression RANGE expression
Rule 32    statement_part -> BEGIN statement_sequence END
Rule 33    statement_sequence -> statement SEMICOLON statement_sequence
Rule 34    statement_sequence -> statement
Rule 35    statement -> assignment_statement
Rule 36    statement -> statement_part
Rule 37    statement -> if_statement
Rule 38    statement -> while_statement
Rule 39    statement -> repeat_statement
Rule 40    statement -> for_statement
Rule 41    statement -> procedure_or_function_call
Rule 42    statement -> <empty>
Rule 43    procedure_or_function_call -> ID LPAREN param_list RPAREN
Rule 44    procedure_or_function_call -> ID
Rule 45    param_list -> param_list COMMA param
Rule 46    param_list -> param
Rule 47    param -> expression
Rule 48    if_statement -> IF expression THEN statement ELSE statement
Rule 49    if_statement -> IF expression THEN statement
Rule 50    while_statement -> WHILE expression DO statement
Rule 51    repeat_statement -> REPEAT statement UNTIL expression
Rule 52    for_statement -> FOR assignment_statement TO expression DO statement
Rule 53    for_statement -> FOR assignment_statement DOWNTO expression DO statement
Rule 54    assignment_statement -> ID ASSIGN expression
Rule 55    expression -> expression and_or expression_m
Rule 56    expression -> expression_m
Rule 57    expression_m -> expression_s
Rule 58    expression_m -> expression_m sign expression_s
Rule 59    expression_s -> element
Rule 60    expression_s -> expression_s psign element
Rule 61    and_or -> AND
Rule 62    and_or -> OR
Rule 63    psign -> TIMES
Rule 64    psign -> DIVIDE
Rule 65    sign -> PLUS
Rule 66    sign -> MINUS
Rule 67    sign -> DIV
Rule 68    sign -> MOD
Rule 69    sign -> EQUALS
Rule 70    sign -> DIFFERENT
Rule 71    sign -> LESSTHAN
Rule 72    sign -> LESSEQUAL
Rule 73    sign -> GREATERTHAN
Rule 74    sign -> GREATEREQUAL
Rule 75    element -> ID
Rule 76    element -> NUMBER
Rule 77    element -> BOOL
Rule 78    element -> PHRASE
Rule 79    element -> LPAREN expression RPAREN
Rule 80    element -> NOT element

Terminals, with rules where they appear

AND                  : 61
ARRAY                : 30
ASSIGN               : 54
BEGIN                : 32
BOOL                 : 77
BOOLEAN              : 27
BREAK                : 
CASE                 : 
COLON                : 8 20 21 24
COMMA                : 10 22 45
CONST                : 
CONTINUE             : 
DIFFERENT            : 70
DIV                  : 67
DIVIDE               : 64
DO                   : 50 52 53
DOT                  : 1
DOWNTO               : 53
ELSE                 : 48
END                  : 32
EQUALS               : 69
FOR                  : 52 53
FUNCTION             : 19 20 21
GREATEREQUAL         : 74
GREATERTHAN          : 73
ID                   : 2 9 10 16 17 20 21 24 43 44 54 75
IF                   : 48 49
INTEGER              : 26
LBRACKET             : 30
LESSEQUAL            : 72
LESSTHAN             : 71
LPAREN               : 17 21 43 79
MINUS                : 66
MOD                  : 68
NOT                  : 80
NUMBER               : 76
OF                   : 30
OR                   : 62
PHRASE               : 78
PLUS                 : 65
PROCEDURE            : 16 17
PROGRAM              : 2
RANGE                : 31
RBRACKET             : 30
READLN               : 
REAL                 : 25
REPEAT               : 51
RPAREN               : 17 21 43 79
SEMICOLON            : 1 8 11 15 18 33
STRING               : 28
THEN                 : 48 49
TIMES                : 63
TO                   : 52
TYPE                 : 
UNTIL                : 51
VAR                  : 4
WHILE                : 50
WRITELN              : 
XOR                  : 
error                : 

Nonterminals, with rules where they appear

and_or               : 55
array_type           : 29
assignment_statement : 35 52 53
block                : 1 15 18
element              : 59 60 80
expression           : 31 31 47 48 49 50 51 52 53 54 55 79
expression_m         : 55 56 58
expression_s         : 57 58 60
for_statement        : 40
function_declaration : 14
function_heading     : 18
header               : 1
id_list              : 8 10
if_statement         : 37
param                : 45 46
param_list           : 43 45
parameter            : 22 23
parameter_list       : 17 21 22
proc_or_func_declaration : 11
procedure_declaration : 13
procedure_heading    : 15
procedure_or_function : 3 11
procedure_or_function_call : 41
program              : 0
psign                : 60
range                : 30
repeat_statement     : 39
sign                 : 58
statement            : 33 34 48 48 49 50 51 52 53
statement_part       : 3 36
statement_sequence   : 32 33
type                 : 8 19 20 21 24 30
variable_declaration : 6 7
variable_declaration_list : 4 6
variable_declaration_part : 3
while_statement      : 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header SEMICOLON block DOT
    (2) header -> . PROGRAM ID

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 3

    (2) header -> PROGRAM . ID

    ID              shift and go to state 5


state 4

    (1) program -> header SEMICOLON . block DOT
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 6
    variable_declaration_part      shift and go to state 7

state 5

    (2) header -> PROGRAM ID .

    SEMICOLON       reduce using rule 2 (header -> PROGRAM ID .)


state 6

    (1) program -> header SEMICOLON block . DOT

    DOT             shift and go to state 9


state 7

    (3) block -> variable_declaration_part . procedure_or_function statement_part
    (11) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (12) procedure_or_function -> .
    (13) proc_or_func_declaration -> . procedure_declaration
    (14) proc_or_func_declaration -> . function_declaration
    (15) procedure_declaration -> . procedure_heading SEMICOLON block
    (18) function_declaration -> . function_heading SEMICOLON block
    (16) procedure_heading -> . PROCEDURE ID
    (17) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (19) function_heading -> . FUNCTION type
    (20) function_heading -> . FUNCTION ID COLON type
    (21) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

    BEGIN           reduce using rule 12 (procedure_or_function -> .)
    PROCEDURE       shift and go to state 16
    FUNCTION        shift and go to state 17

    procedure_or_function          shift and go to state 10
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 12
    function_declaration           shift and go to state 13
    procedure_heading              shift and go to state 14
    function_heading               shift and go to state 15

state 8

    (4) variable_declaration_part -> VAR . variable_declaration_list
    (6) variable_declaration_list -> . variable_declaration variable_declaration_list
    (7) variable_declaration_list -> . variable_declaration
    (8) variable_declaration -> . id_list COLON type SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    ID              shift and go to state 21

    variable_declaration_list      shift and go to state 18
    variable_declaration           shift and go to state 19
    id_list                        shift and go to state 20

state 9

    (1) program -> header SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> header SEMICOLON block DOT .)


state 10

    (3) block -> variable_declaration_part procedure_or_function . statement_part
    (32) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 23

    statement_part                 shift and go to state 22

state 11

    (11) procedure_or_function -> proc_or_func_declaration . SEMICOLON procedure_or_function

    SEMICOLON       shift and go to state 24


state 12

    (13) proc_or_func_declaration -> procedure_declaration .

    SEMICOLON       reduce using rule 13 (proc_or_func_declaration -> procedure_declaration .)


state 13

    (14) proc_or_func_declaration -> function_declaration .

    SEMICOLON       reduce using rule 14 (proc_or_func_declaration -> function_declaration .)


state 14

    (15) procedure_declaration -> procedure_heading . SEMICOLON block

    SEMICOLON       shift and go to state 25


state 15

    (18) function_declaration -> function_heading . SEMICOLON block

    SEMICOLON       shift and go to state 26


state 16

    (16) procedure_heading -> PROCEDURE . ID
    (17) procedure_heading -> PROCEDURE . ID LPAREN parameter_list RPAREN

    ID              shift and go to state 27


state 17

    (19) function_heading -> FUNCTION . type
    (20) function_heading -> FUNCTION . ID COLON type
    (21) function_heading -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    ID              shift and go to state 29
    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 28
    array_type                     shift and go to state 34

state 18

    (4) variable_declaration_part -> VAR variable_declaration_list .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)
    FUNCTION        reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)


state 19

    (6) variable_declaration_list -> variable_declaration . variable_declaration_list
    (7) variable_declaration_list -> variable_declaration .
    (6) variable_declaration_list -> . variable_declaration variable_declaration_list
    (7) variable_declaration_list -> . variable_declaration
    (8) variable_declaration -> . id_list COLON type SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    PROCEDURE       reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    FUNCTION        reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    BEGIN           reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    ID              shift and go to state 21

    variable_declaration           shift and go to state 19
    variable_declaration_list      shift and go to state 36
    id_list                        shift and go to state 20

state 20

    (8) variable_declaration -> id_list . COLON type SEMICOLON

    COLON           shift and go to state 37


state 21

    (9) id_list -> ID .
    (10) id_list -> ID . COMMA id_list

    COLON           reduce using rule 9 (id_list -> ID .)
    COMMA           shift and go to state 38


state 22

    (3) block -> variable_declaration_part procedure_or_function statement_part .

    DOT             reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)
    SEMICOLON       reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)


state 23

    (32) statement_part -> BEGIN . statement_sequence END
    (33) statement_sequence -> . statement SEMICOLON statement_sequence
    (34) statement_sequence -> . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement_sequence             shift and go to state 39
    statement                      shift and go to state 40
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 24

    (11) procedure_or_function -> proc_or_func_declaration SEMICOLON . procedure_or_function
    (11) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (12) procedure_or_function -> .
    (13) proc_or_func_declaration -> . procedure_declaration
    (14) proc_or_func_declaration -> . function_declaration
    (15) procedure_declaration -> . procedure_heading SEMICOLON block
    (18) function_declaration -> . function_heading SEMICOLON block
    (16) procedure_heading -> . PROCEDURE ID
    (17) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (19) function_heading -> . FUNCTION type
    (20) function_heading -> . FUNCTION ID COLON type
    (21) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

    BEGIN           reduce using rule 12 (procedure_or_function -> .)
    PROCEDURE       shift and go to state 16
    FUNCTION        shift and go to state 17

    proc_or_func_declaration       shift and go to state 11
    procedure_or_function          shift and go to state 53
    procedure_declaration          shift and go to state 12
    function_declaration           shift and go to state 13
    procedure_heading              shift and go to state 14
    function_heading               shift and go to state 15

state 25

    (15) procedure_declaration -> procedure_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 54
    variable_declaration_part      shift and go to state 7

state 26

    (18) function_declaration -> function_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 55
    variable_declaration_part      shift and go to state 7

state 27

    (16) procedure_heading -> PROCEDURE ID .
    (17) procedure_heading -> PROCEDURE ID . LPAREN parameter_list RPAREN

    SEMICOLON       reduce using rule 16 (procedure_heading -> PROCEDURE ID .)
    LPAREN          shift and go to state 56


state 28

    (19) function_heading -> FUNCTION type .

    SEMICOLON       reduce using rule 19 (function_heading -> FUNCTION type .)


state 29

    (20) function_heading -> FUNCTION ID . COLON type
    (21) function_heading -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type

    COLON           shift and go to state 57
    LPAREN          shift and go to state 58


state 30

    (25) type -> REAL .

    SEMICOLON       reduce using rule 25 (type -> REAL .)
    COMMA           reduce using rule 25 (type -> REAL .)
    RPAREN          reduce using rule 25 (type -> REAL .)


state 31

    (26) type -> INTEGER .

    SEMICOLON       reduce using rule 26 (type -> INTEGER .)
    COMMA           reduce using rule 26 (type -> INTEGER .)
    RPAREN          reduce using rule 26 (type -> INTEGER .)


state 32

    (27) type -> BOOLEAN .

    SEMICOLON       reduce using rule 27 (type -> BOOLEAN .)
    COMMA           reduce using rule 27 (type -> BOOLEAN .)
    RPAREN          reduce using rule 27 (type -> BOOLEAN .)


state 33

    (28) type -> STRING .

    SEMICOLON       reduce using rule 28 (type -> STRING .)
    COMMA           reduce using rule 28 (type -> STRING .)
    RPAREN          reduce using rule 28 (type -> STRING .)


state 34

    (29) type -> array_type .

    SEMICOLON       reduce using rule 29 (type -> array_type .)
    COMMA           reduce using rule 29 (type -> array_type .)
    RPAREN          reduce using rule 29 (type -> array_type .)


state 35

    (30) array_type -> ARRAY . LBRACKET range RBRACKET OF type

    LBRACKET        shift and go to state 59


state 36

    (6) variable_declaration_list -> variable_declaration variable_declaration_list .

    PROCEDURE       reduce using rule 6 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    FUNCTION        reduce using rule 6 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    BEGIN           reduce using rule 6 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 37

    (8) variable_declaration -> id_list COLON . type SEMICOLON
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 60
    array_type                     shift and go to state 34

state 38

    (10) id_list -> ID COMMA . id_list
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    ID              shift and go to state 21

    id_list                        shift and go to state 61

state 39

    (32) statement_part -> BEGIN statement_sequence . END

    END             shift and go to state 62


state 40

    (33) statement_sequence -> statement . SEMICOLON statement_sequence
    (34) statement_sequence -> statement .

    SEMICOLON       shift and go to state 63
    END             reduce using rule 34 (statement_sequence -> statement .)


state 41

    (35) statement -> assignment_statement .

    SEMICOLON       reduce using rule 35 (statement -> assignment_statement .)
    END             reduce using rule 35 (statement -> assignment_statement .)
    UNTIL           reduce using rule 35 (statement -> assignment_statement .)
    ELSE            reduce using rule 35 (statement -> assignment_statement .)


state 42

    (36) statement -> statement_part .

    SEMICOLON       reduce using rule 36 (statement -> statement_part .)
    END             reduce using rule 36 (statement -> statement_part .)
    UNTIL           reduce using rule 36 (statement -> statement_part .)
    ELSE            reduce using rule 36 (statement -> statement_part .)


state 43

    (37) statement -> if_statement .

    SEMICOLON       reduce using rule 37 (statement -> if_statement .)
    END             reduce using rule 37 (statement -> if_statement .)
    UNTIL           reduce using rule 37 (statement -> if_statement .)
    ELSE            reduce using rule 37 (statement -> if_statement .)


state 44

    (38) statement -> while_statement .

    SEMICOLON       reduce using rule 38 (statement -> while_statement .)
    END             reduce using rule 38 (statement -> while_statement .)
    UNTIL           reduce using rule 38 (statement -> while_statement .)
    ELSE            reduce using rule 38 (statement -> while_statement .)


state 45

    (39) statement -> repeat_statement .

    SEMICOLON       reduce using rule 39 (statement -> repeat_statement .)
    END             reduce using rule 39 (statement -> repeat_statement .)
    UNTIL           reduce using rule 39 (statement -> repeat_statement .)
    ELSE            reduce using rule 39 (statement -> repeat_statement .)


state 46

    (40) statement -> for_statement .

    SEMICOLON       reduce using rule 40 (statement -> for_statement .)
    END             reduce using rule 40 (statement -> for_statement .)
    UNTIL           reduce using rule 40 (statement -> for_statement .)
    ELSE            reduce using rule 40 (statement -> for_statement .)


state 47

    (41) statement -> procedure_or_function_call .

    SEMICOLON       reduce using rule 41 (statement -> procedure_or_function_call .)
    END             reduce using rule 41 (statement -> procedure_or_function_call .)
    UNTIL           reduce using rule 41 (statement -> procedure_or_function_call .)
    ELSE            reduce using rule 41 (statement -> procedure_or_function_call .)


state 48

    (54) assignment_statement -> ID . ASSIGN expression
    (43) procedure_or_function_call -> ID . LPAREN param_list RPAREN
    (44) procedure_or_function_call -> ID .

    ASSIGN          shift and go to state 64
    LPAREN          shift and go to state 65
    SEMICOLON       reduce using rule 44 (procedure_or_function_call -> ID .)
    END             reduce using rule 44 (procedure_or_function_call -> ID .)
    UNTIL           reduce using rule 44 (procedure_or_function_call -> ID .)
    ELSE            reduce using rule 44 (procedure_or_function_call -> ID .)


state 49

    (48) if_statement -> IF . expression THEN statement ELSE statement
    (49) if_statement -> IF . expression THEN statement
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 66
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 50

    (50) while_statement -> WHILE . expression DO statement
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 76
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 51

    (51) repeat_statement -> REPEAT . statement UNTIL expression
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement                      shift and go to state 77
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 52

    (52) for_statement -> FOR . assignment_statement TO expression DO statement
    (53) for_statement -> FOR . assignment_statement DOWNTO expression DO statement
    (54) assignment_statement -> . ID ASSIGN expression

    ID              shift and go to state 79

    assignment_statement           shift and go to state 78

state 53

    (11) procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .

    BEGIN           reduce using rule 11 (procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .)


state 54

    (15) procedure_declaration -> procedure_heading SEMICOLON block .

    SEMICOLON       reduce using rule 15 (procedure_declaration -> procedure_heading SEMICOLON block .)


state 55

    (18) function_declaration -> function_heading SEMICOLON block .

    SEMICOLON       reduce using rule 18 (function_declaration -> function_heading SEMICOLON block .)


state 56

    (17) procedure_heading -> PROCEDURE ID LPAREN . parameter_list RPAREN
    (22) parameter_list -> . parameter COMMA parameter_list
    (23) parameter_list -> . parameter
    (24) parameter -> . ID COLON type

    ID              shift and go to state 80

    parameter_list                 shift and go to state 81
    parameter                      shift and go to state 82

state 57

    (20) function_heading -> FUNCTION ID COLON . type
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 83
    array_type                     shift and go to state 34

state 58

    (21) function_heading -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type
    (22) parameter_list -> . parameter COMMA parameter_list
    (23) parameter_list -> . parameter
    (24) parameter -> . ID COLON type

    ID              shift and go to state 80

    parameter_list                 shift and go to state 84
    parameter                      shift and go to state 82

state 59

    (30) array_type -> ARRAY LBRACKET . range RBRACKET OF type
    (31) range -> . expression RANGE expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    range                          shift and go to state 85
    expression                     shift and go to state 86
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 60

    (8) variable_declaration -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 87


state 61

    (10) id_list -> ID COMMA id_list .

    COLON           reduce using rule 10 (id_list -> ID COMMA id_list .)


state 62

    (32) statement_part -> BEGIN statement_sequence END .

    DOT             reduce using rule 32 (statement_part -> BEGIN statement_sequence END .)
    SEMICOLON       reduce using rule 32 (statement_part -> BEGIN statement_sequence END .)
    END             reduce using rule 32 (statement_part -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 32 (statement_part -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 32 (statement_part -> BEGIN statement_sequence END .)


state 63

    (33) statement_sequence -> statement SEMICOLON . statement_sequence
    (33) statement_sequence -> . statement SEMICOLON statement_sequence
    (34) statement_sequence -> . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement                      shift and go to state 40
    statement_sequence             shift and go to state 88
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 64

    (54) assignment_statement -> ID ASSIGN . expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 89
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 65

    (43) procedure_or_function_call -> ID LPAREN . param_list RPAREN
    (45) param_list -> . param_list COMMA param
    (46) param_list -> . param
    (47) param -> . expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    param_list                     shift and go to state 90
    param                          shift and go to state 91
    expression                     shift and go to state 92
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 66

    (48) if_statement -> IF expression . THEN statement ELSE statement
    (49) if_statement -> IF expression . THEN statement
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    THEN            shift and go to state 93
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 67

    (56) expression -> expression_m .
    (58) expression_m -> expression_m . sign expression_s
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . DIV
    (68) sign -> . MOD
    (69) sign -> . EQUALS
    (70) sign -> . DIFFERENT
    (71) sign -> . LESSTHAN
    (72) sign -> . LESSEQUAL
    (73) sign -> . GREATERTHAN
    (74) sign -> . GREATEREQUAL

    THEN            reduce using rule 56 (expression -> expression_m .)
    AND             reduce using rule 56 (expression -> expression_m .)
    OR              reduce using rule 56 (expression -> expression_m .)
    DO              reduce using rule 56 (expression -> expression_m .)
    RANGE           reduce using rule 56 (expression -> expression_m .)
    SEMICOLON       reduce using rule 56 (expression -> expression_m .)
    END             reduce using rule 56 (expression -> expression_m .)
    UNTIL           reduce using rule 56 (expression -> expression_m .)
    TO              reduce using rule 56 (expression -> expression_m .)
    DOWNTO          reduce using rule 56 (expression -> expression_m .)
    ELSE            reduce using rule 56 (expression -> expression_m .)
    RPAREN          reduce using rule 56 (expression -> expression_m .)
    COMMA           reduce using rule 56 (expression -> expression_m .)
    RBRACKET        reduce using rule 56 (expression -> expression_m .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    DIV             shift and go to state 100
    MOD             shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    LESSTHAN        shift and go to state 104
    LESSEQUAL       shift and go to state 105
    GREATERTHAN     shift and go to state 106
    GREATEREQUAL    shift and go to state 107

    sign                           shift and go to state 97

state 68

    (57) expression_m -> expression_s .
    (60) expression_s -> expression_s . psign element
    (63) psign -> . TIMES
    (64) psign -> . DIVIDE

    PLUS            reduce using rule 57 (expression_m -> expression_s .)
    MINUS           reduce using rule 57 (expression_m -> expression_s .)
    DIV             reduce using rule 57 (expression_m -> expression_s .)
    MOD             reduce using rule 57 (expression_m -> expression_s .)
    EQUALS          reduce using rule 57 (expression_m -> expression_s .)
    DIFFERENT       reduce using rule 57 (expression_m -> expression_s .)
    LESSTHAN        reduce using rule 57 (expression_m -> expression_s .)
    LESSEQUAL       reduce using rule 57 (expression_m -> expression_s .)
    GREATERTHAN     reduce using rule 57 (expression_m -> expression_s .)
    GREATEREQUAL    reduce using rule 57 (expression_m -> expression_s .)
    THEN            reduce using rule 57 (expression_m -> expression_s .)
    AND             reduce using rule 57 (expression_m -> expression_s .)
    OR              reduce using rule 57 (expression_m -> expression_s .)
    DO              reduce using rule 57 (expression_m -> expression_s .)
    RANGE           reduce using rule 57 (expression_m -> expression_s .)
    SEMICOLON       reduce using rule 57 (expression_m -> expression_s .)
    END             reduce using rule 57 (expression_m -> expression_s .)
    UNTIL           reduce using rule 57 (expression_m -> expression_s .)
    TO              reduce using rule 57 (expression_m -> expression_s .)
    DOWNTO          reduce using rule 57 (expression_m -> expression_s .)
    ELSE            reduce using rule 57 (expression_m -> expression_s .)
    RPAREN          reduce using rule 57 (expression_m -> expression_s .)
    COMMA           reduce using rule 57 (expression_m -> expression_s .)
    RBRACKET        reduce using rule 57 (expression_m -> expression_s .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

    psign                          shift and go to state 108

state 69

    (59) expression_s -> element .

    TIMES           reduce using rule 59 (expression_s -> element .)
    DIVIDE          reduce using rule 59 (expression_s -> element .)
    PLUS            reduce using rule 59 (expression_s -> element .)
    MINUS           reduce using rule 59 (expression_s -> element .)
    DIV             reduce using rule 59 (expression_s -> element .)
    MOD             reduce using rule 59 (expression_s -> element .)
    EQUALS          reduce using rule 59 (expression_s -> element .)
    DIFFERENT       reduce using rule 59 (expression_s -> element .)
    LESSTHAN        reduce using rule 59 (expression_s -> element .)
    LESSEQUAL       reduce using rule 59 (expression_s -> element .)
    GREATERTHAN     reduce using rule 59 (expression_s -> element .)
    GREATEREQUAL    reduce using rule 59 (expression_s -> element .)
    THEN            reduce using rule 59 (expression_s -> element .)
    AND             reduce using rule 59 (expression_s -> element .)
    OR              reduce using rule 59 (expression_s -> element .)
    DO              reduce using rule 59 (expression_s -> element .)
    RANGE           reduce using rule 59 (expression_s -> element .)
    SEMICOLON       reduce using rule 59 (expression_s -> element .)
    END             reduce using rule 59 (expression_s -> element .)
    UNTIL           reduce using rule 59 (expression_s -> element .)
    TO              reduce using rule 59 (expression_s -> element .)
    DOWNTO          reduce using rule 59 (expression_s -> element .)
    ELSE            reduce using rule 59 (expression_s -> element .)
    RPAREN          reduce using rule 59 (expression_s -> element .)
    COMMA           reduce using rule 59 (expression_s -> element .)
    RBRACKET        reduce using rule 59 (expression_s -> element .)


state 70

    (75) element -> ID .

    TIMES           reduce using rule 75 (element -> ID .)
    DIVIDE          reduce using rule 75 (element -> ID .)
    PLUS            reduce using rule 75 (element -> ID .)
    MINUS           reduce using rule 75 (element -> ID .)
    DIV             reduce using rule 75 (element -> ID .)
    MOD             reduce using rule 75 (element -> ID .)
    EQUALS          reduce using rule 75 (element -> ID .)
    DIFFERENT       reduce using rule 75 (element -> ID .)
    LESSTHAN        reduce using rule 75 (element -> ID .)
    LESSEQUAL       reduce using rule 75 (element -> ID .)
    GREATERTHAN     reduce using rule 75 (element -> ID .)
    GREATEREQUAL    reduce using rule 75 (element -> ID .)
    THEN            reduce using rule 75 (element -> ID .)
    AND             reduce using rule 75 (element -> ID .)
    OR              reduce using rule 75 (element -> ID .)
    DO              reduce using rule 75 (element -> ID .)
    RANGE           reduce using rule 75 (element -> ID .)
    SEMICOLON       reduce using rule 75 (element -> ID .)
    END             reduce using rule 75 (element -> ID .)
    UNTIL           reduce using rule 75 (element -> ID .)
    TO              reduce using rule 75 (element -> ID .)
    DOWNTO          reduce using rule 75 (element -> ID .)
    ELSE            reduce using rule 75 (element -> ID .)
    RPAREN          reduce using rule 75 (element -> ID .)
    COMMA           reduce using rule 75 (element -> ID .)
    RBRACKET        reduce using rule 75 (element -> ID .)


state 71

    (76) element -> NUMBER .

    TIMES           reduce using rule 76 (element -> NUMBER .)
    DIVIDE          reduce using rule 76 (element -> NUMBER .)
    PLUS            reduce using rule 76 (element -> NUMBER .)
    MINUS           reduce using rule 76 (element -> NUMBER .)
    DIV             reduce using rule 76 (element -> NUMBER .)
    MOD             reduce using rule 76 (element -> NUMBER .)
    EQUALS          reduce using rule 76 (element -> NUMBER .)
    DIFFERENT       reduce using rule 76 (element -> NUMBER .)
    LESSTHAN        reduce using rule 76 (element -> NUMBER .)
    LESSEQUAL       reduce using rule 76 (element -> NUMBER .)
    GREATERTHAN     reduce using rule 76 (element -> NUMBER .)
    GREATEREQUAL    reduce using rule 76 (element -> NUMBER .)
    THEN            reduce using rule 76 (element -> NUMBER .)
    AND             reduce using rule 76 (element -> NUMBER .)
    OR              reduce using rule 76 (element -> NUMBER .)
    DO              reduce using rule 76 (element -> NUMBER .)
    RANGE           reduce using rule 76 (element -> NUMBER .)
    SEMICOLON       reduce using rule 76 (element -> NUMBER .)
    END             reduce using rule 76 (element -> NUMBER .)
    UNTIL           reduce using rule 76 (element -> NUMBER .)
    TO              reduce using rule 76 (element -> NUMBER .)
    DOWNTO          reduce using rule 76 (element -> NUMBER .)
    ELSE            reduce using rule 76 (element -> NUMBER .)
    RPAREN          reduce using rule 76 (element -> NUMBER .)
    COMMA           reduce using rule 76 (element -> NUMBER .)
    RBRACKET        reduce using rule 76 (element -> NUMBER .)


state 72

    (77) element -> BOOL .

    TIMES           reduce using rule 77 (element -> BOOL .)
    DIVIDE          reduce using rule 77 (element -> BOOL .)
    PLUS            reduce using rule 77 (element -> BOOL .)
    MINUS           reduce using rule 77 (element -> BOOL .)
    DIV             reduce using rule 77 (element -> BOOL .)
    MOD             reduce using rule 77 (element -> BOOL .)
    EQUALS          reduce using rule 77 (element -> BOOL .)
    DIFFERENT       reduce using rule 77 (element -> BOOL .)
    LESSTHAN        reduce using rule 77 (element -> BOOL .)
    LESSEQUAL       reduce using rule 77 (element -> BOOL .)
    GREATERTHAN     reduce using rule 77 (element -> BOOL .)
    GREATEREQUAL    reduce using rule 77 (element -> BOOL .)
    THEN            reduce using rule 77 (element -> BOOL .)
    AND             reduce using rule 77 (element -> BOOL .)
    OR              reduce using rule 77 (element -> BOOL .)
    DO              reduce using rule 77 (element -> BOOL .)
    RANGE           reduce using rule 77 (element -> BOOL .)
    SEMICOLON       reduce using rule 77 (element -> BOOL .)
    END             reduce using rule 77 (element -> BOOL .)
    UNTIL           reduce using rule 77 (element -> BOOL .)
    TO              reduce using rule 77 (element -> BOOL .)
    DOWNTO          reduce using rule 77 (element -> BOOL .)
    ELSE            reduce using rule 77 (element -> BOOL .)
    RPAREN          reduce using rule 77 (element -> BOOL .)
    COMMA           reduce using rule 77 (element -> BOOL .)
    RBRACKET        reduce using rule 77 (element -> BOOL .)


state 73

    (78) element -> PHRASE .

    TIMES           reduce using rule 78 (element -> PHRASE .)
    DIVIDE          reduce using rule 78 (element -> PHRASE .)
    PLUS            reduce using rule 78 (element -> PHRASE .)
    MINUS           reduce using rule 78 (element -> PHRASE .)
    DIV             reduce using rule 78 (element -> PHRASE .)
    MOD             reduce using rule 78 (element -> PHRASE .)
    EQUALS          reduce using rule 78 (element -> PHRASE .)
    DIFFERENT       reduce using rule 78 (element -> PHRASE .)
    LESSTHAN        reduce using rule 78 (element -> PHRASE .)
    LESSEQUAL       reduce using rule 78 (element -> PHRASE .)
    GREATERTHAN     reduce using rule 78 (element -> PHRASE .)
    GREATEREQUAL    reduce using rule 78 (element -> PHRASE .)
    THEN            reduce using rule 78 (element -> PHRASE .)
    AND             reduce using rule 78 (element -> PHRASE .)
    OR              reduce using rule 78 (element -> PHRASE .)
    DO              reduce using rule 78 (element -> PHRASE .)
    RANGE           reduce using rule 78 (element -> PHRASE .)
    SEMICOLON       reduce using rule 78 (element -> PHRASE .)
    END             reduce using rule 78 (element -> PHRASE .)
    UNTIL           reduce using rule 78 (element -> PHRASE .)
    TO              reduce using rule 78 (element -> PHRASE .)
    DOWNTO          reduce using rule 78 (element -> PHRASE .)
    ELSE            reduce using rule 78 (element -> PHRASE .)
    RPAREN          reduce using rule 78 (element -> PHRASE .)
    COMMA           reduce using rule 78 (element -> PHRASE .)
    RBRACKET        reduce using rule 78 (element -> PHRASE .)


state 74

    (79) element -> LPAREN . expression RPAREN
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 111
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 75

    (80) element -> NOT . element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    element                        shift and go to state 112

state 76

    (50) while_statement -> WHILE expression . DO statement
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    DO              shift and go to state 113
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 77

    (51) repeat_statement -> REPEAT statement . UNTIL expression

    UNTIL           shift and go to state 114


state 78

    (52) for_statement -> FOR assignment_statement . TO expression DO statement
    (53) for_statement -> FOR assignment_statement . DOWNTO expression DO statement

    TO              shift and go to state 115
    DOWNTO          shift and go to state 116


state 79

    (54) assignment_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 64


state 80

    (24) parameter -> ID . COLON type

    COLON           shift and go to state 117


state 81

    (17) procedure_heading -> PROCEDURE ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 118


state 82

    (22) parameter_list -> parameter . COMMA parameter_list
    (23) parameter_list -> parameter .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 23 (parameter_list -> parameter .)


state 83

    (20) function_heading -> FUNCTION ID COLON type .

    SEMICOLON       reduce using rule 20 (function_heading -> FUNCTION ID COLON type .)


state 84

    (21) function_heading -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type

    RPAREN          shift and go to state 120


state 85

    (30) array_type -> ARRAY LBRACKET range . RBRACKET OF type

    RBRACKET        shift and go to state 121


state 86

    (31) range -> expression . RANGE expression
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    RANGE           shift and go to state 122
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 87

    (8) variable_declaration -> id_list COLON type SEMICOLON .

    ID              reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    FUNCTION        reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)


state 88

    (33) statement_sequence -> statement SEMICOLON statement_sequence .

    END             reduce using rule 33 (statement_sequence -> statement SEMICOLON statement_sequence .)


state 89

    (54) assignment_statement -> ID ASSIGN expression .
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    SEMICOLON       reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    UNTIL           reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    TO              reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    DOWNTO          reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 54 (assignment_statement -> ID ASSIGN expression .)
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 90

    (43) procedure_or_function_call -> ID LPAREN param_list . RPAREN
    (45) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 91

    (46) param_list -> param .

    RPAREN          reduce using rule 46 (param_list -> param .)
    COMMA           reduce using rule 46 (param_list -> param .)


state 92

    (47) param -> expression .
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    RPAREN          reduce using rule 47 (param -> expression .)
    COMMA           reduce using rule 47 (param -> expression .)
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 93

    (48) if_statement -> IF expression THEN . statement ELSE statement
    (49) if_statement -> IF expression THEN . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    ELSE            reduce using rule 42 (statement -> .)
    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement                      shift and go to state 125
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 94

    (55) expression -> expression and_or . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression_m                   shift and go to state 126
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 95

    (61) and_or -> AND .

    ID              reduce using rule 61 (and_or -> AND .)
    NUMBER          reduce using rule 61 (and_or -> AND .)
    BOOL            reduce using rule 61 (and_or -> AND .)
    PHRASE          reduce using rule 61 (and_or -> AND .)
    LPAREN          reduce using rule 61 (and_or -> AND .)
    NOT             reduce using rule 61 (and_or -> AND .)


state 96

    (62) and_or -> OR .

    ID              reduce using rule 62 (and_or -> OR .)
    NUMBER          reduce using rule 62 (and_or -> OR .)
    BOOL            reduce using rule 62 (and_or -> OR .)
    PHRASE          reduce using rule 62 (and_or -> OR .)
    LPAREN          reduce using rule 62 (and_or -> OR .)
    NOT             reduce using rule 62 (and_or -> OR .)


state 97

    (58) expression_m -> expression_m sign . expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression_s                   shift and go to state 127
    element                        shift and go to state 69

state 98

    (65) sign -> PLUS .

    ID              reduce using rule 65 (sign -> PLUS .)
    NUMBER          reduce using rule 65 (sign -> PLUS .)
    BOOL            reduce using rule 65 (sign -> PLUS .)
    PHRASE          reduce using rule 65 (sign -> PLUS .)
    LPAREN          reduce using rule 65 (sign -> PLUS .)
    NOT             reduce using rule 65 (sign -> PLUS .)


state 99

    (66) sign -> MINUS .

    ID              reduce using rule 66 (sign -> MINUS .)
    NUMBER          reduce using rule 66 (sign -> MINUS .)
    BOOL            reduce using rule 66 (sign -> MINUS .)
    PHRASE          reduce using rule 66 (sign -> MINUS .)
    LPAREN          reduce using rule 66 (sign -> MINUS .)
    NOT             reduce using rule 66 (sign -> MINUS .)


state 100

    (67) sign -> DIV .

    ID              reduce using rule 67 (sign -> DIV .)
    NUMBER          reduce using rule 67 (sign -> DIV .)
    BOOL            reduce using rule 67 (sign -> DIV .)
    PHRASE          reduce using rule 67 (sign -> DIV .)
    LPAREN          reduce using rule 67 (sign -> DIV .)
    NOT             reduce using rule 67 (sign -> DIV .)


state 101

    (68) sign -> MOD .

    ID              reduce using rule 68 (sign -> MOD .)
    NUMBER          reduce using rule 68 (sign -> MOD .)
    BOOL            reduce using rule 68 (sign -> MOD .)
    PHRASE          reduce using rule 68 (sign -> MOD .)
    LPAREN          reduce using rule 68 (sign -> MOD .)
    NOT             reduce using rule 68 (sign -> MOD .)


state 102

    (69) sign -> EQUALS .

    ID              reduce using rule 69 (sign -> EQUALS .)
    NUMBER          reduce using rule 69 (sign -> EQUALS .)
    BOOL            reduce using rule 69 (sign -> EQUALS .)
    PHRASE          reduce using rule 69 (sign -> EQUALS .)
    LPAREN          reduce using rule 69 (sign -> EQUALS .)
    NOT             reduce using rule 69 (sign -> EQUALS .)


state 103

    (70) sign -> DIFFERENT .

    ID              reduce using rule 70 (sign -> DIFFERENT .)
    NUMBER          reduce using rule 70 (sign -> DIFFERENT .)
    BOOL            reduce using rule 70 (sign -> DIFFERENT .)
    PHRASE          reduce using rule 70 (sign -> DIFFERENT .)
    LPAREN          reduce using rule 70 (sign -> DIFFERENT .)
    NOT             reduce using rule 70 (sign -> DIFFERENT .)


state 104

    (71) sign -> LESSTHAN .

    ID              reduce using rule 71 (sign -> LESSTHAN .)
    NUMBER          reduce using rule 71 (sign -> LESSTHAN .)
    BOOL            reduce using rule 71 (sign -> LESSTHAN .)
    PHRASE          reduce using rule 71 (sign -> LESSTHAN .)
    LPAREN          reduce using rule 71 (sign -> LESSTHAN .)
    NOT             reduce using rule 71 (sign -> LESSTHAN .)


state 105

    (72) sign -> LESSEQUAL .

    ID              reduce using rule 72 (sign -> LESSEQUAL .)
    NUMBER          reduce using rule 72 (sign -> LESSEQUAL .)
    BOOL            reduce using rule 72 (sign -> LESSEQUAL .)
    PHRASE          reduce using rule 72 (sign -> LESSEQUAL .)
    LPAREN          reduce using rule 72 (sign -> LESSEQUAL .)
    NOT             reduce using rule 72 (sign -> LESSEQUAL .)


state 106

    (73) sign -> GREATERTHAN .

    ID              reduce using rule 73 (sign -> GREATERTHAN .)
    NUMBER          reduce using rule 73 (sign -> GREATERTHAN .)
    BOOL            reduce using rule 73 (sign -> GREATERTHAN .)
    PHRASE          reduce using rule 73 (sign -> GREATERTHAN .)
    LPAREN          reduce using rule 73 (sign -> GREATERTHAN .)
    NOT             reduce using rule 73 (sign -> GREATERTHAN .)


state 107

    (74) sign -> GREATEREQUAL .

    ID              reduce using rule 74 (sign -> GREATEREQUAL .)
    NUMBER          reduce using rule 74 (sign -> GREATEREQUAL .)
    BOOL            reduce using rule 74 (sign -> GREATEREQUAL .)
    PHRASE          reduce using rule 74 (sign -> GREATEREQUAL .)
    LPAREN          reduce using rule 74 (sign -> GREATEREQUAL .)
    NOT             reduce using rule 74 (sign -> GREATEREQUAL .)


state 108

    (60) expression_s -> expression_s psign . element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    element                        shift and go to state 128

state 109

    (63) psign -> TIMES .

    ID              reduce using rule 63 (psign -> TIMES .)
    NUMBER          reduce using rule 63 (psign -> TIMES .)
    BOOL            reduce using rule 63 (psign -> TIMES .)
    PHRASE          reduce using rule 63 (psign -> TIMES .)
    LPAREN          reduce using rule 63 (psign -> TIMES .)
    NOT             reduce using rule 63 (psign -> TIMES .)


state 110

    (64) psign -> DIVIDE .

    ID              reduce using rule 64 (psign -> DIVIDE .)
    NUMBER          reduce using rule 64 (psign -> DIVIDE .)
    BOOL            reduce using rule 64 (psign -> DIVIDE .)
    PHRASE          reduce using rule 64 (psign -> DIVIDE .)
    LPAREN          reduce using rule 64 (psign -> DIVIDE .)
    NOT             reduce using rule 64 (psign -> DIVIDE .)


state 111

    (79) element -> LPAREN expression . RPAREN
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    RPAREN          shift and go to state 129
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 112

    (80) element -> NOT element .

    TIMES           reduce using rule 80 (element -> NOT element .)
    DIVIDE          reduce using rule 80 (element -> NOT element .)
    PLUS            reduce using rule 80 (element -> NOT element .)
    MINUS           reduce using rule 80 (element -> NOT element .)
    DIV             reduce using rule 80 (element -> NOT element .)
    MOD             reduce using rule 80 (element -> NOT element .)
    EQUALS          reduce using rule 80 (element -> NOT element .)
    DIFFERENT       reduce using rule 80 (element -> NOT element .)
    LESSTHAN        reduce using rule 80 (element -> NOT element .)
    LESSEQUAL       reduce using rule 80 (element -> NOT element .)
    GREATERTHAN     reduce using rule 80 (element -> NOT element .)
    GREATEREQUAL    reduce using rule 80 (element -> NOT element .)
    THEN            reduce using rule 80 (element -> NOT element .)
    AND             reduce using rule 80 (element -> NOT element .)
    OR              reduce using rule 80 (element -> NOT element .)
    DO              reduce using rule 80 (element -> NOT element .)
    RANGE           reduce using rule 80 (element -> NOT element .)
    SEMICOLON       reduce using rule 80 (element -> NOT element .)
    END             reduce using rule 80 (element -> NOT element .)
    UNTIL           reduce using rule 80 (element -> NOT element .)
    TO              reduce using rule 80 (element -> NOT element .)
    DOWNTO          reduce using rule 80 (element -> NOT element .)
    ELSE            reduce using rule 80 (element -> NOT element .)
    RPAREN          reduce using rule 80 (element -> NOT element .)
    COMMA           reduce using rule 80 (element -> NOT element .)
    RBRACKET        reduce using rule 80 (element -> NOT element .)


state 113

    (50) while_statement -> WHILE expression DO . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    ELSE            reduce using rule 42 (statement -> .)
    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement                      shift and go to state 130
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 114

    (51) repeat_statement -> REPEAT statement UNTIL . expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 131
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 115

    (52) for_statement -> FOR assignment_statement TO . expression DO statement
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 132
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 116

    (53) for_statement -> FOR assignment_statement DOWNTO . expression DO statement
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 133
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 117

    (24) parameter -> ID COLON . type
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 134
    array_type                     shift and go to state 34

state 118

    (17) procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 17 (procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .)


state 119

    (22) parameter_list -> parameter COMMA . parameter_list
    (22) parameter_list -> . parameter COMMA parameter_list
    (23) parameter_list -> . parameter
    (24) parameter -> . ID COLON type

    ID              shift and go to state 80

    parameter                      shift and go to state 82
    parameter_list                 shift and go to state 135

state 120

    (21) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type

    COLON           shift and go to state 136


state 121

    (30) array_type -> ARRAY LBRACKET range RBRACKET . OF type

    OF              shift and go to state 137


state 122

    (31) range -> expression RANGE . expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    expression                     shift and go to state 138
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 123

    (43) procedure_or_function_call -> ID LPAREN param_list RPAREN .

    SEMICOLON       reduce using rule 43 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    END             reduce using rule 43 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    UNTIL           reduce using rule 43 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    ELSE            reduce using rule 43 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)


state 124

    (45) param_list -> param_list COMMA . param
    (47) param -> . expression
    (55) expression -> . expression and_or expression_m
    (56) expression -> . expression_m
    (57) expression_m -> . expression_s
    (58) expression_m -> . expression_m sign expression_s
    (59) expression_s -> . element
    (60) expression_s -> . expression_s psign element
    (75) element -> . ID
    (76) element -> . NUMBER
    (77) element -> . BOOL
    (78) element -> . PHRASE
    (79) element -> . LPAREN expression RPAREN
    (80) element -> . NOT element

    ID              shift and go to state 70
    NUMBER          shift and go to state 71
    BOOL            shift and go to state 72
    PHRASE          shift and go to state 73
    LPAREN          shift and go to state 74
    NOT             shift and go to state 75

    param                          shift and go to state 139
    expression                     shift and go to state 92
    expression_m                   shift and go to state 67
    expression_s                   shift and go to state 68
    element                        shift and go to state 69

state 125

    (48) if_statement -> IF expression THEN statement . ELSE statement
    (49) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 140
    SEMICOLON       reduce using rule 49 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 49 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 49 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 49 (if_statement -> IF expression THEN statement .) ]


state 126

    (55) expression -> expression and_or expression_m .
    (58) expression_m -> expression_m . sign expression_s
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . DIV
    (68) sign -> . MOD
    (69) sign -> . EQUALS
    (70) sign -> . DIFFERENT
    (71) sign -> . LESSTHAN
    (72) sign -> . LESSEQUAL
    (73) sign -> . GREATERTHAN
    (74) sign -> . GREATEREQUAL

    THEN            reduce using rule 55 (expression -> expression and_or expression_m .)
    AND             reduce using rule 55 (expression -> expression and_or expression_m .)
    OR              reduce using rule 55 (expression -> expression and_or expression_m .)
    DO              reduce using rule 55 (expression -> expression and_or expression_m .)
    RANGE           reduce using rule 55 (expression -> expression and_or expression_m .)
    SEMICOLON       reduce using rule 55 (expression -> expression and_or expression_m .)
    END             reduce using rule 55 (expression -> expression and_or expression_m .)
    UNTIL           reduce using rule 55 (expression -> expression and_or expression_m .)
    TO              reduce using rule 55 (expression -> expression and_or expression_m .)
    DOWNTO          reduce using rule 55 (expression -> expression and_or expression_m .)
    ELSE            reduce using rule 55 (expression -> expression and_or expression_m .)
    RPAREN          reduce using rule 55 (expression -> expression and_or expression_m .)
    COMMA           reduce using rule 55 (expression -> expression and_or expression_m .)
    RBRACKET        reduce using rule 55 (expression -> expression and_or expression_m .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    DIV             shift and go to state 100
    MOD             shift and go to state 101
    EQUALS          shift and go to state 102
    DIFFERENT       shift and go to state 103
    LESSTHAN        shift and go to state 104
    LESSEQUAL       shift and go to state 105
    GREATERTHAN     shift and go to state 106
    GREATEREQUAL    shift and go to state 107

    sign                           shift and go to state 97

state 127

    (58) expression_m -> expression_m sign expression_s .
    (60) expression_s -> expression_s . psign element
    (63) psign -> . TIMES
    (64) psign -> . DIVIDE

    PLUS            reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    MINUS           reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    DIV             reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    MOD             reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    EQUALS          reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    DIFFERENT       reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    LESSTHAN        reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    LESSEQUAL       reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    GREATERTHAN     reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    GREATEREQUAL    reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    THEN            reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    AND             reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    OR              reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    DO              reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    RANGE           reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    SEMICOLON       reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    END             reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    UNTIL           reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    TO              reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    DOWNTO          reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    ELSE            reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    RPAREN          reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    COMMA           reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    RBRACKET        reduce using rule 58 (expression_m -> expression_m sign expression_s .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

    psign                          shift and go to state 108

state 128

    (60) expression_s -> expression_s psign element .

    TIMES           reduce using rule 60 (expression_s -> expression_s psign element .)
    DIVIDE          reduce using rule 60 (expression_s -> expression_s psign element .)
    PLUS            reduce using rule 60 (expression_s -> expression_s psign element .)
    MINUS           reduce using rule 60 (expression_s -> expression_s psign element .)
    DIV             reduce using rule 60 (expression_s -> expression_s psign element .)
    MOD             reduce using rule 60 (expression_s -> expression_s psign element .)
    EQUALS          reduce using rule 60 (expression_s -> expression_s psign element .)
    DIFFERENT       reduce using rule 60 (expression_s -> expression_s psign element .)
    LESSTHAN        reduce using rule 60 (expression_s -> expression_s psign element .)
    LESSEQUAL       reduce using rule 60 (expression_s -> expression_s psign element .)
    GREATERTHAN     reduce using rule 60 (expression_s -> expression_s psign element .)
    GREATEREQUAL    reduce using rule 60 (expression_s -> expression_s psign element .)
    THEN            reduce using rule 60 (expression_s -> expression_s psign element .)
    AND             reduce using rule 60 (expression_s -> expression_s psign element .)
    OR              reduce using rule 60 (expression_s -> expression_s psign element .)
    DO              reduce using rule 60 (expression_s -> expression_s psign element .)
    RANGE           reduce using rule 60 (expression_s -> expression_s psign element .)
    SEMICOLON       reduce using rule 60 (expression_s -> expression_s psign element .)
    END             reduce using rule 60 (expression_s -> expression_s psign element .)
    UNTIL           reduce using rule 60 (expression_s -> expression_s psign element .)
    TO              reduce using rule 60 (expression_s -> expression_s psign element .)
    DOWNTO          reduce using rule 60 (expression_s -> expression_s psign element .)
    ELSE            reduce using rule 60 (expression_s -> expression_s psign element .)
    RPAREN          reduce using rule 60 (expression_s -> expression_s psign element .)
    COMMA           reduce using rule 60 (expression_s -> expression_s psign element .)
    RBRACKET        reduce using rule 60 (expression_s -> expression_s psign element .)


state 129

    (79) element -> LPAREN expression RPAREN .

    TIMES           reduce using rule 79 (element -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 79 (element -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 79 (element -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 79 (element -> LPAREN expression RPAREN .)
    DIV             reduce using rule 79 (element -> LPAREN expression RPAREN .)
    MOD             reduce using rule 79 (element -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 79 (element -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 79 (element -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 79 (element -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 79 (element -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 79 (element -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 79 (element -> LPAREN expression RPAREN .)
    THEN            reduce using rule 79 (element -> LPAREN expression RPAREN .)
    AND             reduce using rule 79 (element -> LPAREN expression RPAREN .)
    OR              reduce using rule 79 (element -> LPAREN expression RPAREN .)
    DO              reduce using rule 79 (element -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 79 (element -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 79 (element -> LPAREN expression RPAREN .)
    END             reduce using rule 79 (element -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 79 (element -> LPAREN expression RPAREN .)
    TO              reduce using rule 79 (element -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 79 (element -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 79 (element -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (element -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (element -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 79 (element -> LPAREN expression RPAREN .)


state 130

    (50) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 50 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 50 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 50 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 50 (while_statement -> WHILE expression DO statement .)


state 131

    (51) repeat_statement -> REPEAT statement UNTIL expression .
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    SEMICOLON       reduce using rule 51 (repeat_statement -> REPEAT statement UNTIL expression .)
    END             reduce using rule 51 (repeat_statement -> REPEAT statement UNTIL expression .)
    UNTIL           reduce using rule 51 (repeat_statement -> REPEAT statement UNTIL expression .)
    ELSE            reduce using rule 51 (repeat_statement -> REPEAT statement UNTIL expression .)
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 132

    (52) for_statement -> FOR assignment_statement TO expression . DO statement
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    DO              shift and go to state 141
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 133

    (53) for_statement -> FOR assignment_statement DOWNTO expression . DO statement
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    DO              shift and go to state 142
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 134

    (24) parameter -> ID COLON type .

    COMMA           reduce using rule 24 (parameter -> ID COLON type .)
    RPAREN          reduce using rule 24 (parameter -> ID COLON type .)


state 135

    (22) parameter_list -> parameter COMMA parameter_list .

    RPAREN          reduce using rule 22 (parameter_list -> parameter COMMA parameter_list .)


state 136

    (21) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 143
    array_type                     shift and go to state 34

state 137

    (30) array_type -> ARRAY LBRACKET range RBRACKET OF . type
    (25) type -> . REAL
    (26) type -> . INTEGER
    (27) type -> . BOOLEAN
    (28) type -> . STRING
    (29) type -> . array_type
    (30) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 144
    array_type                     shift and go to state 34

state 138

    (31) range -> expression RANGE expression .
    (55) expression -> expression . and_or expression_m
    (61) and_or -> . AND
    (62) and_or -> . OR

    RBRACKET        reduce using rule 31 (range -> expression RANGE expression .)
    AND             shift and go to state 95
    OR              shift and go to state 96

    and_or                         shift and go to state 94

state 139

    (45) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 45 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 45 (param_list -> param_list COMMA param .)


state 140

    (48) if_statement -> IF expression THEN statement ELSE . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    ELSE            reduce using rule 42 (statement -> .)
    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    statement                      shift and go to state 145
    assignment_statement           shift and go to state 41
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 141

    (52) for_statement -> FOR assignment_statement TO expression DO . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    ELSE            reduce using rule 42 (statement -> .)
    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    assignment_statement           shift and go to state 41
    statement                      shift and go to state 146
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 142

    (53) for_statement -> FOR assignment_statement DOWNTO expression DO . statement
    (35) statement -> . assignment_statement
    (36) statement -> . statement_part
    (37) statement -> . if_statement
    (38) statement -> . while_statement
    (39) statement -> . repeat_statement
    (40) statement -> . for_statement
    (41) statement -> . procedure_or_function_call
    (42) statement -> .
    (54) assignment_statement -> . ID ASSIGN expression
    (32) statement_part -> . BEGIN statement_sequence END
    (48) if_statement -> . IF expression THEN statement ELSE statement
    (49) if_statement -> . IF expression THEN statement
    (50) while_statement -> . WHILE expression DO statement
    (51) repeat_statement -> . REPEAT statement UNTIL expression
    (52) for_statement -> . FOR assignment_statement TO expression DO statement
    (53) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (43) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (44) procedure_or_function_call -> . ID

    ELSE            reduce using rule 42 (statement -> .)
    SEMICOLON       reduce using rule 42 (statement -> .)
    END             reduce using rule 42 (statement -> .)
    UNTIL           reduce using rule 42 (statement -> .)
    ID              shift and go to state 48
    BEGIN           shift and go to state 23
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    REPEAT          shift and go to state 51
    FOR             shift and go to state 52

    assignment_statement           shift and go to state 41
    statement                      shift and go to state 147
    statement_part                 shift and go to state 42
    if_statement                   shift and go to state 43
    while_statement                shift and go to state 44
    repeat_statement               shift and go to state 45
    for_statement                  shift and go to state 46
    procedure_or_function_call     shift and go to state 47

state 143

    (21) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .

    SEMICOLON       reduce using rule 21 (function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .)


state 144

    (30) array_type -> ARRAY LBRACKET range RBRACKET OF type .

    SEMICOLON       reduce using rule 30 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    COMMA           reduce using rule 30 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    RPAREN          reduce using rule 30 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)


state 145

    (48) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 48 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 48 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 48 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 48 (if_statement -> IF expression THEN statement ELSE statement .)


state 146

    (52) for_statement -> FOR assignment_statement TO expression DO statement .

    SEMICOLON       reduce using rule 52 (for_statement -> FOR assignment_statement TO expression DO statement .)
    END             reduce using rule 52 (for_statement -> FOR assignment_statement TO expression DO statement .)
    UNTIL           reduce using rule 52 (for_statement -> FOR assignment_statement TO expression DO statement .)
    ELSE            reduce using rule 52 (for_statement -> FOR assignment_statement TO expression DO statement .)


state 147

    (53) for_statement -> FOR assignment_statement DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 53 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    END             reduce using rule 53 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    UNTIL           reduce using rule 53 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    ELSE            reduce using rule 53 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 125 resolved as shift
