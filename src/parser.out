Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> header SEMICOLON block DOT
Rule 2     header -> PROGRAM ID
Rule 3     block -> variable_declaration_part procedure_or_function statement_part
Rule 4     block -> procedure_or_function statement_part
Rule 5     block -> variable_declaration_part statement_part
Rule 6     block -> statement_part
Rule 7     variable_declaration_part -> VAR variable_declaration_list
Rule 8     variable_declaration_part -> <empty>
Rule 9     variable_declaration_list -> variable_declaration variable_declaration_list
Rule 10    variable_declaration_list -> variable_declaration
Rule 11    variable_declaration -> id_list COLON type SEMICOLON
Rule 12    id_list -> ID
Rule 13    id_list -> ID LBRACKET expression RBRACKET
Rule 14    id_list -> ID COMMA id_list
Rule 15    id_list -> ID LBRACKET expression RBRACKET COMMA id_list
Rule 16    procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function
Rule 17    procedure_or_function -> <empty>
Rule 18    proc_or_func_declaration -> procedure_declaration
Rule 19    proc_or_func_declaration -> function_declaration
Rule 20    procedure_declaration -> procedure_heading SEMICOLON block
Rule 21    procedure_heading -> PROCEDURE ID
Rule 22    procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN
Rule 23    function_declaration -> function_heading SEMICOLON block
Rule 24    function_heading -> FUNCTION type
Rule 25    function_heading -> FUNCTION ID COLON type
Rule 26    function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type
Rule 27    parameter_list -> parameter COMMA parameter_list
Rule 28    parameter_list -> parameter
Rule 29    parameter -> ID COLON type
Rule 30    type -> REAL
Rule 31    type -> INTEGER
Rule 32    type -> BOOLEAN
Rule 33    type -> STRING
Rule 34    type -> array_type
Rule 35    array_type -> ARRAY LBRACKET range RBRACKET OF type
Rule 36    range -> expression RANGE expression
Rule 37    statement_part -> BEGIN statement_sequence END
Rule 38    statement_sequence -> statement SEMICOLON statement_sequence
Rule 39    statement_sequence -> statement
Rule 40    statement -> assignment_statement
Rule 41    statement -> statement_part
Rule 42    statement -> if_statement
Rule 43    statement -> while_statement
Rule 44    statement -> repeat_statement
Rule 45    statement -> for_statement
Rule 46    statement -> procedure_or_function_call
Rule 47    statement -> writeln_statement
Rule 48    statement -> readln_statement
Rule 49    statement -> break_statement
Rule 50    statement -> continue_statement
Rule 51    statement -> case_statement
Rule 52    statement -> <empty>
Rule 53    case_statement -> CASE expression OF case_list END
Rule 54    case_list -> case_option SEMICOLON case_list
Rule 55    case_list -> case_option SEMICOLON
Rule 56    case_option -> NUMBER COLON statement
Rule 57    case_option -> BOOL COLON statement
Rule 58    case_option -> PHRASE COLON statement
Rule 59    case_option -> ID COLON statement
Rule 60    writeln_statement -> WRITELN LPAREN param_list RPAREN
Rule 61    writeln_statement -> WRITELN LPAREN RPAREN
Rule 62    readln_statement -> READLN LPAREN id_list RPAREN
Rule 63    readln_statement -> READLN LPAREN RPAREN
Rule 64    break_statement -> BREAK SEMICOLON
Rule 65    continue_statement -> CONTINUE SEMICOLON
Rule 66    procedure_or_function_call -> ID LPAREN param_list RPAREN
Rule 67    procedure_or_function_call -> ID
Rule 68    param_list -> param_list COMMA param
Rule 69    param_list -> param
Rule 70    param -> expression
Rule 71    if_statement -> IF expression THEN statement ELSE statement
Rule 72    if_statement -> IF expression THEN statement
Rule 73    while_statement -> WHILE expression DO statement
Rule 74    repeat_statement -> REPEAT statement UNTIL expression
Rule 75    for_statement -> FOR assignment_statement TO expression DO statement
Rule 76    for_statement -> FOR assignment_statement DOWNTO expression DO statement
Rule 77    assignment_statement -> ID ASSIGN expression
Rule 78    expression -> expression and_or expression_m
Rule 79    expression -> expression_m
Rule 80    expression_m -> expression_s
Rule 81    expression_m -> expression_m sign expression_s
Rule 82    expression_s -> element
Rule 83    expression_s -> expression_s psign element
Rule 84    and_or -> AND
Rule 85    and_or -> OR
Rule 86    psign -> TIMES
Rule 87    psign -> DIVIDE
Rule 88    sign -> PLUS
Rule 89    sign -> MINUS
Rule 90    sign -> DIV
Rule 91    sign -> MOD
Rule 92    sign -> EQUALS
Rule 93    sign -> DIFFERENT
Rule 94    sign -> LESSTHAN
Rule 95    sign -> LESSEQUAL
Rule 96    sign -> GREATERTHAN
Rule 97    sign -> GREATEREQUAL
Rule 98    length_function -> LENGTH LPAREN expression RPAREN
Rule 99    element -> ID
Rule 100   element -> NUMBER
Rule 101   element -> BOOL
Rule 102   element -> PHRASE
Rule 103   element -> LPAREN expression RPAREN
Rule 104   element -> NOT element
Rule 105   element -> length_function
Rule 106   element -> ID LBRACKET expression RBRACKET

Terminals, with rules where they appear

AND                  : 84
ARRAY                : 35
ASSIGN               : 77
BEGIN                : 37
BOOL                 : 57 101
BOOLEAN              : 32
BREAK                : 64
CASE                 : 53
COLON                : 11 25 26 29 56 57 58 59
COMMA                : 14 15 27 68
CONTINUE             : 65
DIFFERENT            : 93
DIV                  : 90
DIVIDE               : 87
DO                   : 73 75 76
DOT                  : 1
DOWNTO               : 76
ELSE                 : 71
END                  : 37 53
EQUALS               : 92
FOR                  : 75 76
FUNCTION             : 24 25 26
GREATEREQUAL         : 97
GREATERTHAN          : 96
ID                   : 2 12 13 14 15 21 22 25 26 29 59 66 67 77 99 106
IF                   : 71 72
INTEGER              : 31
LBRACKET             : 13 15 35 106
LENGTH               : 98
LESSEQUAL            : 95
LESSTHAN             : 94
LPAREN               : 22 26 60 61 62 63 66 98 103
MINUS                : 89
MOD                  : 91
NOT                  : 104
NUMBER               : 56 100
OF                   : 35 53
OR                   : 85
PHRASE               : 58 102
PLUS                 : 88
PROCEDURE            : 21 22
PROGRAM              : 2
RANGE                : 36
RBRACKET             : 13 15 35 106
READLN               : 62 63
REAL                 : 30
REPEAT               : 74
RPAREN               : 22 26 60 61 62 63 66 98 103
SEMICOLON            : 1 11 16 20 23 38 54 55 64 65
STRING               : 33
THEN                 : 71 72
TIMES                : 86
TO                   : 75
UNTIL                : 74
VAR                  : 7
WHILE                : 73
WRITELN              : 60 61
error                : 

Nonterminals, with rules where they appear

and_or               : 78
array_type           : 34
assignment_statement : 40 75 76
block                : 1 20 23
break_statement      : 49
case_list            : 53 54
case_option          : 54 55
case_statement       : 51
continue_statement   : 50
element              : 82 83 104
expression           : 13 15 36 36 53 70 71 72 73 74 75 76 77 78 98 103 106
expression_m         : 78 79 81
expression_s         : 80 81 83
for_statement        : 45
function_declaration : 19
function_heading     : 23
header               : 1
id_list              : 11 14 15 62
if_statement         : 42
length_function      : 105
param                : 68 69
param_list           : 60 66 68
parameter            : 27 28
parameter_list       : 22 26 27
proc_or_func_declaration : 16
procedure_declaration : 18
procedure_heading    : 20
procedure_or_function : 3 4 16
procedure_or_function_call : 46
program              : 0
psign                : 83
range                : 35
readln_statement     : 48
repeat_statement     : 44
sign                 : 81
statement            : 38 39 56 57 58 59 71 71 72 73 74 75 76
statement_part       : 3 4 5 6 41
statement_sequence   : 37 38
type                 : 11 24 25 26 29 35
variable_declaration : 9 10
variable_declaration_list : 7 9
variable_declaration_part : 3 5
while_statement      : 43
writeln_statement    : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header SEMICOLON block DOT
    (2) header -> . PROGRAM ID

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 3

    (2) header -> PROGRAM . ID

    ID              shift and go to state 5


state 4

    (1) program -> header SEMICOLON . block DOT
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) block -> . procedure_or_function statement_part
    (5) block -> . variable_declaration_part statement_part
    (6) block -> . statement_part
    (7) variable_declaration_part -> . VAR variable_declaration_list
    (8) variable_declaration_part -> .
    (16) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (17) procedure_or_function -> .
    (37) statement_part -> . BEGIN statement_sequence END
    (18) proc_or_func_declaration -> . procedure_declaration
    (19) proc_or_func_declaration -> . function_declaration
    (20) procedure_declaration -> . procedure_heading SEMICOLON block
    (23) function_declaration -> . function_heading SEMICOLON block
    (21) procedure_heading -> . PROCEDURE ID
    (22) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (24) function_heading -> . FUNCTION type
    (25) function_heading -> . FUNCTION ID COLON type
    (26) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

  ! reduce/reduce conflict for BEGIN resolved using rule 8 (variable_declaration_part -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    VAR             shift and go to state 10
    BEGIN           shift and go to state 12
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

  ! BEGIN           [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! PROCEDURE       [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! FUNCTION        [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! BEGIN           [ reduce using rule 17 (procedure_or_function -> .) ]

    block                          shift and go to state 6
    variable_declaration_part      shift and go to state 7
    procedure_or_function          shift and go to state 8
    statement_part                 shift and go to state 9
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 16

state 5

    (2) header -> PROGRAM ID .

    SEMICOLON       reduce using rule 2 (header -> PROGRAM ID .)


state 6

    (1) program -> header SEMICOLON block . DOT

    DOT             shift and go to state 19


state 7

    (3) block -> variable_declaration_part . procedure_or_function statement_part
    (5) block -> variable_declaration_part . statement_part
    (16) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (17) procedure_or_function -> .
    (37) statement_part -> . BEGIN statement_sequence END
    (18) proc_or_func_declaration -> . procedure_declaration
    (19) proc_or_func_declaration -> . function_declaration
    (20) procedure_declaration -> . procedure_heading SEMICOLON block
    (23) function_declaration -> . function_heading SEMICOLON block
    (21) procedure_heading -> . PROCEDURE ID
    (22) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (24) function_heading -> . FUNCTION type
    (25) function_heading -> . FUNCTION ID COLON type
    (26) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

  ! shift/reduce conflict for BEGIN resolved as shift
    BEGIN           shift and go to state 12
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

  ! BEGIN           [ reduce using rule 17 (procedure_or_function -> .) ]

    procedure_or_function          shift and go to state 20
    statement_part                 shift and go to state 21
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 16

state 8

    (4) block -> procedure_or_function . statement_part
    (37) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 12

    statement_part                 shift and go to state 22

state 9

    (6) block -> statement_part .

    DOT             reduce using rule 6 (block -> statement_part .)
    SEMICOLON       reduce using rule 6 (block -> statement_part .)


state 10

    (7) variable_declaration_part -> VAR . variable_declaration_list
    (9) variable_declaration_list -> . variable_declaration variable_declaration_list
    (10) variable_declaration_list -> . variable_declaration
    (11) variable_declaration -> . id_list COLON type SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . ID LBRACKET expression RBRACKET
    (14) id_list -> . ID COMMA id_list
    (15) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 26

    variable_declaration_list      shift and go to state 23
    variable_declaration           shift and go to state 24
    id_list                        shift and go to state 25

state 11

    (16) procedure_or_function -> proc_or_func_declaration . SEMICOLON procedure_or_function

    SEMICOLON       shift and go to state 27


state 12

    (37) statement_part -> BEGIN . statement_sequence END
    (38) statement_sequence -> . statement SEMICOLON statement_sequence
    (39) statement_sequence -> . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement_sequence             shift and go to state 28
    statement                      shift and go to state 29
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 13

    (18) proc_or_func_declaration -> procedure_declaration .

    SEMICOLON       reduce using rule 18 (proc_or_func_declaration -> procedure_declaration .)


state 14

    (19) proc_or_func_declaration -> function_declaration .

    SEMICOLON       reduce using rule 19 (proc_or_func_declaration -> function_declaration .)


state 15

    (20) procedure_declaration -> procedure_heading . SEMICOLON block

    SEMICOLON       shift and go to state 52


state 16

    (23) function_declaration -> function_heading . SEMICOLON block

    SEMICOLON       shift and go to state 53


state 17

    (21) procedure_heading -> PROCEDURE . ID
    (22) procedure_heading -> PROCEDURE . ID LPAREN parameter_list RPAREN

    ID              shift and go to state 54


state 18

    (24) function_heading -> FUNCTION . type
    (25) function_heading -> FUNCTION . ID COLON type
    (26) function_heading -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    ID              shift and go to state 56
    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 55
    array_type                     shift and go to state 61

state 19

    (1) program -> header SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> header SEMICOLON block DOT .)


state 20

    (3) block -> variable_declaration_part procedure_or_function . statement_part
    (37) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 12

    statement_part                 shift and go to state 63

state 21

    (5) block -> variable_declaration_part statement_part .

    DOT             reduce using rule 5 (block -> variable_declaration_part statement_part .)
    SEMICOLON       reduce using rule 5 (block -> variable_declaration_part statement_part .)


state 22

    (4) block -> procedure_or_function statement_part .

    DOT             reduce using rule 4 (block -> procedure_or_function statement_part .)
    SEMICOLON       reduce using rule 4 (block -> procedure_or_function statement_part .)


state 23

    (7) variable_declaration_part -> VAR variable_declaration_list .

    BEGIN           reduce using rule 7 (variable_declaration_part -> VAR variable_declaration_list .)
    PROCEDURE       reduce using rule 7 (variable_declaration_part -> VAR variable_declaration_list .)
    FUNCTION        reduce using rule 7 (variable_declaration_part -> VAR variable_declaration_list .)


state 24

    (9) variable_declaration_list -> variable_declaration . variable_declaration_list
    (10) variable_declaration_list -> variable_declaration .
    (9) variable_declaration_list -> . variable_declaration variable_declaration_list
    (10) variable_declaration_list -> . variable_declaration
    (11) variable_declaration -> . id_list COLON type SEMICOLON
    (12) id_list -> . ID
    (13) id_list -> . ID LBRACKET expression RBRACKET
    (14) id_list -> . ID COMMA id_list
    (15) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    BEGIN           reduce using rule 10 (variable_declaration_list -> variable_declaration .)
    PROCEDURE       reduce using rule 10 (variable_declaration_list -> variable_declaration .)
    FUNCTION        reduce using rule 10 (variable_declaration_list -> variable_declaration .)
    ID              shift and go to state 26

    variable_declaration           shift and go to state 24
    variable_declaration_list      shift and go to state 64
    id_list                        shift and go to state 25

state 25

    (11) variable_declaration -> id_list . COLON type SEMICOLON

    COLON           shift and go to state 65


state 26

    (12) id_list -> ID .
    (13) id_list -> ID . LBRACKET expression RBRACKET
    (14) id_list -> ID . COMMA id_list
    (15) id_list -> ID . LBRACKET expression RBRACKET COMMA id_list

    COLON           reduce using rule 12 (id_list -> ID .)
    RPAREN          reduce using rule 12 (id_list -> ID .)
    LBRACKET        shift and go to state 66
    COMMA           shift and go to state 67


state 27

    (16) procedure_or_function -> proc_or_func_declaration SEMICOLON . procedure_or_function
    (16) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (17) procedure_or_function -> .
    (18) proc_or_func_declaration -> . procedure_declaration
    (19) proc_or_func_declaration -> . function_declaration
    (20) procedure_declaration -> . procedure_heading SEMICOLON block
    (23) function_declaration -> . function_heading SEMICOLON block
    (21) procedure_heading -> . PROCEDURE ID
    (22) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (24) function_heading -> . FUNCTION type
    (25) function_heading -> . FUNCTION ID COLON type
    (26) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

    BEGIN           reduce using rule 17 (procedure_or_function -> .)
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    proc_or_func_declaration       shift and go to state 11
    procedure_or_function          shift and go to state 68
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 16

state 28

    (37) statement_part -> BEGIN statement_sequence . END

    END             shift and go to state 69


state 29

    (38) statement_sequence -> statement . SEMICOLON statement_sequence
    (39) statement_sequence -> statement .

    SEMICOLON       shift and go to state 70
    END             reduce using rule 39 (statement_sequence -> statement .)


state 30

    (40) statement -> assignment_statement .

    SEMICOLON       reduce using rule 40 (statement -> assignment_statement .)
    END             reduce using rule 40 (statement -> assignment_statement .)
    UNTIL           reduce using rule 40 (statement -> assignment_statement .)
    ELSE            reduce using rule 40 (statement -> assignment_statement .)


state 31

    (41) statement -> statement_part .

    SEMICOLON       reduce using rule 41 (statement -> statement_part .)
    END             reduce using rule 41 (statement -> statement_part .)
    UNTIL           reduce using rule 41 (statement -> statement_part .)
    ELSE            reduce using rule 41 (statement -> statement_part .)


state 32

    (42) statement -> if_statement .

    SEMICOLON       reduce using rule 42 (statement -> if_statement .)
    END             reduce using rule 42 (statement -> if_statement .)
    UNTIL           reduce using rule 42 (statement -> if_statement .)
    ELSE            reduce using rule 42 (statement -> if_statement .)


state 33

    (43) statement -> while_statement .

    SEMICOLON       reduce using rule 43 (statement -> while_statement .)
    END             reduce using rule 43 (statement -> while_statement .)
    UNTIL           reduce using rule 43 (statement -> while_statement .)
    ELSE            reduce using rule 43 (statement -> while_statement .)


state 34

    (44) statement -> repeat_statement .

    SEMICOLON       reduce using rule 44 (statement -> repeat_statement .)
    END             reduce using rule 44 (statement -> repeat_statement .)
    UNTIL           reduce using rule 44 (statement -> repeat_statement .)
    ELSE            reduce using rule 44 (statement -> repeat_statement .)


state 35

    (45) statement -> for_statement .

    SEMICOLON       reduce using rule 45 (statement -> for_statement .)
    END             reduce using rule 45 (statement -> for_statement .)
    UNTIL           reduce using rule 45 (statement -> for_statement .)
    ELSE            reduce using rule 45 (statement -> for_statement .)


state 36

    (46) statement -> procedure_or_function_call .

    SEMICOLON       reduce using rule 46 (statement -> procedure_or_function_call .)
    END             reduce using rule 46 (statement -> procedure_or_function_call .)
    UNTIL           reduce using rule 46 (statement -> procedure_or_function_call .)
    ELSE            reduce using rule 46 (statement -> procedure_or_function_call .)


state 37

    (47) statement -> writeln_statement .

    SEMICOLON       reduce using rule 47 (statement -> writeln_statement .)
    END             reduce using rule 47 (statement -> writeln_statement .)
    UNTIL           reduce using rule 47 (statement -> writeln_statement .)
    ELSE            reduce using rule 47 (statement -> writeln_statement .)


state 38

    (48) statement -> readln_statement .

    SEMICOLON       reduce using rule 48 (statement -> readln_statement .)
    END             reduce using rule 48 (statement -> readln_statement .)
    UNTIL           reduce using rule 48 (statement -> readln_statement .)
    ELSE            reduce using rule 48 (statement -> readln_statement .)


state 39

    (49) statement -> break_statement .

    SEMICOLON       reduce using rule 49 (statement -> break_statement .)
    END             reduce using rule 49 (statement -> break_statement .)
    UNTIL           reduce using rule 49 (statement -> break_statement .)
    ELSE            reduce using rule 49 (statement -> break_statement .)


state 40

    (50) statement -> continue_statement .

    SEMICOLON       reduce using rule 50 (statement -> continue_statement .)
    END             reduce using rule 50 (statement -> continue_statement .)
    UNTIL           reduce using rule 50 (statement -> continue_statement .)
    ELSE            reduce using rule 50 (statement -> continue_statement .)


state 41

    (51) statement -> case_statement .

    SEMICOLON       reduce using rule 51 (statement -> case_statement .)
    END             reduce using rule 51 (statement -> case_statement .)
    UNTIL           reduce using rule 51 (statement -> case_statement .)
    ELSE            reduce using rule 51 (statement -> case_statement .)


state 42

    (77) assignment_statement -> ID . ASSIGN expression
    (66) procedure_or_function_call -> ID . LPAREN param_list RPAREN
    (67) procedure_or_function_call -> ID .

    ASSIGN          shift and go to state 71
    LPAREN          shift and go to state 72
    SEMICOLON       reduce using rule 67 (procedure_or_function_call -> ID .)
    END             reduce using rule 67 (procedure_or_function_call -> ID .)
    UNTIL           reduce using rule 67 (procedure_or_function_call -> ID .)
    ELSE            reduce using rule 67 (procedure_or_function_call -> ID .)


state 43

    (71) if_statement -> IF . expression THEN statement ELSE statement
    (72) if_statement -> IF . expression THEN statement
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 73
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 44

    (73) while_statement -> WHILE . expression DO statement
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 85
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 45

    (74) repeat_statement -> REPEAT . statement UNTIL expression
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 86
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 46

    (75) for_statement -> FOR . assignment_statement TO expression DO statement
    (76) for_statement -> FOR . assignment_statement DOWNTO expression DO statement
    (77) assignment_statement -> . ID ASSIGN expression

    ID              shift and go to state 88

    assignment_statement           shift and go to state 87

state 47

    (60) writeln_statement -> WRITELN . LPAREN param_list RPAREN
    (61) writeln_statement -> WRITELN . LPAREN RPAREN

    LPAREN          shift and go to state 89


state 48

    (62) readln_statement -> READLN . LPAREN id_list RPAREN
    (63) readln_statement -> READLN . LPAREN RPAREN

    LPAREN          shift and go to state 90


state 49

    (64) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 91


state 50

    (65) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 92


state 51

    (53) case_statement -> CASE . expression OF case_list END
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 93
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 52

    (20) procedure_declaration -> procedure_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) block -> . procedure_or_function statement_part
    (5) block -> . variable_declaration_part statement_part
    (6) block -> . statement_part
    (7) variable_declaration_part -> . VAR variable_declaration_list
    (8) variable_declaration_part -> .
    (16) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (17) procedure_or_function -> .
    (37) statement_part -> . BEGIN statement_sequence END
    (18) proc_or_func_declaration -> . procedure_declaration
    (19) proc_or_func_declaration -> . function_declaration
    (20) procedure_declaration -> . procedure_heading SEMICOLON block
    (23) function_declaration -> . function_heading SEMICOLON block
    (21) procedure_heading -> . PROCEDURE ID
    (22) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (24) function_heading -> . FUNCTION type
    (25) function_heading -> . FUNCTION ID COLON type
    (26) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

  ! reduce/reduce conflict for BEGIN resolved using rule 8 (variable_declaration_part -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    VAR             shift and go to state 10
    BEGIN           shift and go to state 12
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

  ! BEGIN           [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! PROCEDURE       [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! FUNCTION        [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! BEGIN           [ reduce using rule 17 (procedure_or_function -> .) ]

    procedure_heading              shift and go to state 15
    block                          shift and go to state 94
    variable_declaration_part      shift and go to state 7
    procedure_or_function          shift and go to state 8
    statement_part                 shift and go to state 9
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    function_heading               shift and go to state 16

state 53

    (23) function_declaration -> function_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) block -> . procedure_or_function statement_part
    (5) block -> . variable_declaration_part statement_part
    (6) block -> . statement_part
    (7) variable_declaration_part -> . VAR variable_declaration_list
    (8) variable_declaration_part -> .
    (16) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (17) procedure_or_function -> .
    (37) statement_part -> . BEGIN statement_sequence END
    (18) proc_or_func_declaration -> . procedure_declaration
    (19) proc_or_func_declaration -> . function_declaration
    (20) procedure_declaration -> . procedure_heading SEMICOLON block
    (23) function_declaration -> . function_heading SEMICOLON block
    (21) procedure_heading -> . PROCEDURE ID
    (22) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (24) function_heading -> . FUNCTION type
    (25) function_heading -> . FUNCTION ID COLON type
    (26) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

  ! reduce/reduce conflict for BEGIN resolved using rule 8 (variable_declaration_part -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    VAR             shift and go to state 10
    BEGIN           shift and go to state 12
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

  ! BEGIN           [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! PROCEDURE       [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! FUNCTION        [ reduce using rule 8 (variable_declaration_part -> .) ]
  ! BEGIN           [ reduce using rule 17 (procedure_or_function -> .) ]

    function_heading               shift and go to state 16
    block                          shift and go to state 95
    variable_declaration_part      shift and go to state 7
    procedure_or_function          shift and go to state 8
    statement_part                 shift and go to state 9
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15

state 54

    (21) procedure_heading -> PROCEDURE ID .
    (22) procedure_heading -> PROCEDURE ID . LPAREN parameter_list RPAREN

    SEMICOLON       reduce using rule 21 (procedure_heading -> PROCEDURE ID .)
    LPAREN          shift and go to state 96


state 55

    (24) function_heading -> FUNCTION type .

    SEMICOLON       reduce using rule 24 (function_heading -> FUNCTION type .)


state 56

    (25) function_heading -> FUNCTION ID . COLON type
    (26) function_heading -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type

    COLON           shift and go to state 97
    LPAREN          shift and go to state 98


state 57

    (30) type -> REAL .

    SEMICOLON       reduce using rule 30 (type -> REAL .)
    COMMA           reduce using rule 30 (type -> REAL .)
    RPAREN          reduce using rule 30 (type -> REAL .)


state 58

    (31) type -> INTEGER .

    SEMICOLON       reduce using rule 31 (type -> INTEGER .)
    COMMA           reduce using rule 31 (type -> INTEGER .)
    RPAREN          reduce using rule 31 (type -> INTEGER .)


state 59

    (32) type -> BOOLEAN .

    SEMICOLON       reduce using rule 32 (type -> BOOLEAN .)
    COMMA           reduce using rule 32 (type -> BOOLEAN .)
    RPAREN          reduce using rule 32 (type -> BOOLEAN .)


state 60

    (33) type -> STRING .

    SEMICOLON       reduce using rule 33 (type -> STRING .)
    COMMA           reduce using rule 33 (type -> STRING .)
    RPAREN          reduce using rule 33 (type -> STRING .)


state 61

    (34) type -> array_type .

    SEMICOLON       reduce using rule 34 (type -> array_type .)
    COMMA           reduce using rule 34 (type -> array_type .)
    RPAREN          reduce using rule 34 (type -> array_type .)


state 62

    (35) array_type -> ARRAY . LBRACKET range RBRACKET OF type

    LBRACKET        shift and go to state 99


state 63

    (3) block -> variable_declaration_part procedure_or_function statement_part .

    DOT             reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)
    SEMICOLON       reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)


state 64

    (9) variable_declaration_list -> variable_declaration variable_declaration_list .

    BEGIN           reduce using rule 9 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    PROCEDURE       reduce using rule 9 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    FUNCTION        reduce using rule 9 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 65

    (11) variable_declaration -> id_list COLON . type SEMICOLON
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 100
    array_type                     shift and go to state 61

state 66

    (13) id_list -> ID LBRACKET . expression RBRACKET
    (15) id_list -> ID LBRACKET . expression RBRACKET COMMA id_list
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 101
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 67

    (14) id_list -> ID COMMA . id_list
    (12) id_list -> . ID
    (13) id_list -> . ID LBRACKET expression RBRACKET
    (14) id_list -> . ID COMMA id_list
    (15) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 26

    id_list                        shift and go to state 102

state 68

    (16) procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .

    BEGIN           reduce using rule 16 (procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .)


state 69

    (37) statement_part -> BEGIN statement_sequence END .

    DOT             reduce using rule 37 (statement_part -> BEGIN statement_sequence END .)
    SEMICOLON       reduce using rule 37 (statement_part -> BEGIN statement_sequence END .)
    END             reduce using rule 37 (statement_part -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 37 (statement_part -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 37 (statement_part -> BEGIN statement_sequence END .)


state 70

    (38) statement_sequence -> statement SEMICOLON . statement_sequence
    (38) statement_sequence -> . statement SEMICOLON statement_sequence
    (39) statement_sequence -> . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 29
    statement_sequence             shift and go to state 103
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 71

    (77) assignment_statement -> ID ASSIGN . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 104
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 72

    (66) procedure_or_function_call -> ID LPAREN . param_list RPAREN
    (68) param_list -> . param_list COMMA param
    (69) param_list -> . param
    (70) param -> . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    param_list                     shift and go to state 105
    param                          shift and go to state 106
    expression                     shift and go to state 107
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 73

    (71) if_statement -> IF expression . THEN statement ELSE statement
    (72) if_statement -> IF expression . THEN statement
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    THEN            shift and go to state 108
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 74

    (79) expression -> expression_m .
    (81) expression_m -> expression_m . sign expression_s
    (88) sign -> . PLUS
    (89) sign -> . MINUS
    (90) sign -> . DIV
    (91) sign -> . MOD
    (92) sign -> . EQUALS
    (93) sign -> . DIFFERENT
    (94) sign -> . LESSTHAN
    (95) sign -> . LESSEQUAL
    (96) sign -> . GREATERTHAN
    (97) sign -> . GREATEREQUAL

    THEN            reduce using rule 79 (expression -> expression_m .)
    AND             reduce using rule 79 (expression -> expression_m .)
    OR              reduce using rule 79 (expression -> expression_m .)
    DO              reduce using rule 79 (expression -> expression_m .)
    OF              reduce using rule 79 (expression -> expression_m .)
    RBRACKET        reduce using rule 79 (expression -> expression_m .)
    SEMICOLON       reduce using rule 79 (expression -> expression_m .)
    END             reduce using rule 79 (expression -> expression_m .)
    UNTIL           reduce using rule 79 (expression -> expression_m .)
    TO              reduce using rule 79 (expression -> expression_m .)
    DOWNTO          reduce using rule 79 (expression -> expression_m .)
    ELSE            reduce using rule 79 (expression -> expression_m .)
    RPAREN          reduce using rule 79 (expression -> expression_m .)
    COMMA           reduce using rule 79 (expression -> expression_m .)
    RANGE           reduce using rule 79 (expression -> expression_m .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    DIV             shift and go to state 115
    MOD             shift and go to state 116
    EQUALS          shift and go to state 117
    DIFFERENT       shift and go to state 118
    LESSTHAN        shift and go to state 119
    LESSEQUAL       shift and go to state 120
    GREATERTHAN     shift and go to state 121
    GREATEREQUAL    shift and go to state 122

    sign                           shift and go to state 112

state 75

    (80) expression_m -> expression_s .
    (83) expression_s -> expression_s . psign element
    (86) psign -> . TIMES
    (87) psign -> . DIVIDE

    PLUS            reduce using rule 80 (expression_m -> expression_s .)
    MINUS           reduce using rule 80 (expression_m -> expression_s .)
    DIV             reduce using rule 80 (expression_m -> expression_s .)
    MOD             reduce using rule 80 (expression_m -> expression_s .)
    EQUALS          reduce using rule 80 (expression_m -> expression_s .)
    DIFFERENT       reduce using rule 80 (expression_m -> expression_s .)
    LESSTHAN        reduce using rule 80 (expression_m -> expression_s .)
    LESSEQUAL       reduce using rule 80 (expression_m -> expression_s .)
    GREATERTHAN     reduce using rule 80 (expression_m -> expression_s .)
    GREATEREQUAL    reduce using rule 80 (expression_m -> expression_s .)
    THEN            reduce using rule 80 (expression_m -> expression_s .)
    AND             reduce using rule 80 (expression_m -> expression_s .)
    OR              reduce using rule 80 (expression_m -> expression_s .)
    DO              reduce using rule 80 (expression_m -> expression_s .)
    OF              reduce using rule 80 (expression_m -> expression_s .)
    RBRACKET        reduce using rule 80 (expression_m -> expression_s .)
    SEMICOLON       reduce using rule 80 (expression_m -> expression_s .)
    END             reduce using rule 80 (expression_m -> expression_s .)
    UNTIL           reduce using rule 80 (expression_m -> expression_s .)
    TO              reduce using rule 80 (expression_m -> expression_s .)
    DOWNTO          reduce using rule 80 (expression_m -> expression_s .)
    ELSE            reduce using rule 80 (expression_m -> expression_s .)
    RPAREN          reduce using rule 80 (expression_m -> expression_s .)
    COMMA           reduce using rule 80 (expression_m -> expression_s .)
    RANGE           reduce using rule 80 (expression_m -> expression_s .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125

    psign                          shift and go to state 123

state 76

    (82) expression_s -> element .

    TIMES           reduce using rule 82 (expression_s -> element .)
    DIVIDE          reduce using rule 82 (expression_s -> element .)
    PLUS            reduce using rule 82 (expression_s -> element .)
    MINUS           reduce using rule 82 (expression_s -> element .)
    DIV             reduce using rule 82 (expression_s -> element .)
    MOD             reduce using rule 82 (expression_s -> element .)
    EQUALS          reduce using rule 82 (expression_s -> element .)
    DIFFERENT       reduce using rule 82 (expression_s -> element .)
    LESSTHAN        reduce using rule 82 (expression_s -> element .)
    LESSEQUAL       reduce using rule 82 (expression_s -> element .)
    GREATERTHAN     reduce using rule 82 (expression_s -> element .)
    GREATEREQUAL    reduce using rule 82 (expression_s -> element .)
    THEN            reduce using rule 82 (expression_s -> element .)
    AND             reduce using rule 82 (expression_s -> element .)
    OR              reduce using rule 82 (expression_s -> element .)
    DO              reduce using rule 82 (expression_s -> element .)
    OF              reduce using rule 82 (expression_s -> element .)
    RBRACKET        reduce using rule 82 (expression_s -> element .)
    SEMICOLON       reduce using rule 82 (expression_s -> element .)
    END             reduce using rule 82 (expression_s -> element .)
    UNTIL           reduce using rule 82 (expression_s -> element .)
    TO              reduce using rule 82 (expression_s -> element .)
    DOWNTO          reduce using rule 82 (expression_s -> element .)
    ELSE            reduce using rule 82 (expression_s -> element .)
    RPAREN          reduce using rule 82 (expression_s -> element .)
    COMMA           reduce using rule 82 (expression_s -> element .)
    RANGE           reduce using rule 82 (expression_s -> element .)


state 77

    (99) element -> ID .
    (106) element -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 99 (element -> ID .)
    DIVIDE          reduce using rule 99 (element -> ID .)
    PLUS            reduce using rule 99 (element -> ID .)
    MINUS           reduce using rule 99 (element -> ID .)
    DIV             reduce using rule 99 (element -> ID .)
    MOD             reduce using rule 99 (element -> ID .)
    EQUALS          reduce using rule 99 (element -> ID .)
    DIFFERENT       reduce using rule 99 (element -> ID .)
    LESSTHAN        reduce using rule 99 (element -> ID .)
    LESSEQUAL       reduce using rule 99 (element -> ID .)
    GREATERTHAN     reduce using rule 99 (element -> ID .)
    GREATEREQUAL    reduce using rule 99 (element -> ID .)
    THEN            reduce using rule 99 (element -> ID .)
    AND             reduce using rule 99 (element -> ID .)
    OR              reduce using rule 99 (element -> ID .)
    DO              reduce using rule 99 (element -> ID .)
    OF              reduce using rule 99 (element -> ID .)
    RBRACKET        reduce using rule 99 (element -> ID .)
    SEMICOLON       reduce using rule 99 (element -> ID .)
    END             reduce using rule 99 (element -> ID .)
    UNTIL           reduce using rule 99 (element -> ID .)
    TO              reduce using rule 99 (element -> ID .)
    DOWNTO          reduce using rule 99 (element -> ID .)
    ELSE            reduce using rule 99 (element -> ID .)
    RPAREN          reduce using rule 99 (element -> ID .)
    COMMA           reduce using rule 99 (element -> ID .)
    RANGE           reduce using rule 99 (element -> ID .)
    LBRACKET        shift and go to state 126


state 78

    (100) element -> NUMBER .

    TIMES           reduce using rule 100 (element -> NUMBER .)
    DIVIDE          reduce using rule 100 (element -> NUMBER .)
    PLUS            reduce using rule 100 (element -> NUMBER .)
    MINUS           reduce using rule 100 (element -> NUMBER .)
    DIV             reduce using rule 100 (element -> NUMBER .)
    MOD             reduce using rule 100 (element -> NUMBER .)
    EQUALS          reduce using rule 100 (element -> NUMBER .)
    DIFFERENT       reduce using rule 100 (element -> NUMBER .)
    LESSTHAN        reduce using rule 100 (element -> NUMBER .)
    LESSEQUAL       reduce using rule 100 (element -> NUMBER .)
    GREATERTHAN     reduce using rule 100 (element -> NUMBER .)
    GREATEREQUAL    reduce using rule 100 (element -> NUMBER .)
    THEN            reduce using rule 100 (element -> NUMBER .)
    AND             reduce using rule 100 (element -> NUMBER .)
    OR              reduce using rule 100 (element -> NUMBER .)
    DO              reduce using rule 100 (element -> NUMBER .)
    OF              reduce using rule 100 (element -> NUMBER .)
    RBRACKET        reduce using rule 100 (element -> NUMBER .)
    SEMICOLON       reduce using rule 100 (element -> NUMBER .)
    END             reduce using rule 100 (element -> NUMBER .)
    UNTIL           reduce using rule 100 (element -> NUMBER .)
    TO              reduce using rule 100 (element -> NUMBER .)
    DOWNTO          reduce using rule 100 (element -> NUMBER .)
    ELSE            reduce using rule 100 (element -> NUMBER .)
    RPAREN          reduce using rule 100 (element -> NUMBER .)
    COMMA           reduce using rule 100 (element -> NUMBER .)
    RANGE           reduce using rule 100 (element -> NUMBER .)


state 79

    (101) element -> BOOL .

    TIMES           reduce using rule 101 (element -> BOOL .)
    DIVIDE          reduce using rule 101 (element -> BOOL .)
    PLUS            reduce using rule 101 (element -> BOOL .)
    MINUS           reduce using rule 101 (element -> BOOL .)
    DIV             reduce using rule 101 (element -> BOOL .)
    MOD             reduce using rule 101 (element -> BOOL .)
    EQUALS          reduce using rule 101 (element -> BOOL .)
    DIFFERENT       reduce using rule 101 (element -> BOOL .)
    LESSTHAN        reduce using rule 101 (element -> BOOL .)
    LESSEQUAL       reduce using rule 101 (element -> BOOL .)
    GREATERTHAN     reduce using rule 101 (element -> BOOL .)
    GREATEREQUAL    reduce using rule 101 (element -> BOOL .)
    THEN            reduce using rule 101 (element -> BOOL .)
    AND             reduce using rule 101 (element -> BOOL .)
    OR              reduce using rule 101 (element -> BOOL .)
    DO              reduce using rule 101 (element -> BOOL .)
    OF              reduce using rule 101 (element -> BOOL .)
    RBRACKET        reduce using rule 101 (element -> BOOL .)
    SEMICOLON       reduce using rule 101 (element -> BOOL .)
    END             reduce using rule 101 (element -> BOOL .)
    UNTIL           reduce using rule 101 (element -> BOOL .)
    TO              reduce using rule 101 (element -> BOOL .)
    DOWNTO          reduce using rule 101 (element -> BOOL .)
    ELSE            reduce using rule 101 (element -> BOOL .)
    RPAREN          reduce using rule 101 (element -> BOOL .)
    COMMA           reduce using rule 101 (element -> BOOL .)
    RANGE           reduce using rule 101 (element -> BOOL .)


state 80

    (102) element -> PHRASE .

    TIMES           reduce using rule 102 (element -> PHRASE .)
    DIVIDE          reduce using rule 102 (element -> PHRASE .)
    PLUS            reduce using rule 102 (element -> PHRASE .)
    MINUS           reduce using rule 102 (element -> PHRASE .)
    DIV             reduce using rule 102 (element -> PHRASE .)
    MOD             reduce using rule 102 (element -> PHRASE .)
    EQUALS          reduce using rule 102 (element -> PHRASE .)
    DIFFERENT       reduce using rule 102 (element -> PHRASE .)
    LESSTHAN        reduce using rule 102 (element -> PHRASE .)
    LESSEQUAL       reduce using rule 102 (element -> PHRASE .)
    GREATERTHAN     reduce using rule 102 (element -> PHRASE .)
    GREATEREQUAL    reduce using rule 102 (element -> PHRASE .)
    THEN            reduce using rule 102 (element -> PHRASE .)
    AND             reduce using rule 102 (element -> PHRASE .)
    OR              reduce using rule 102 (element -> PHRASE .)
    DO              reduce using rule 102 (element -> PHRASE .)
    OF              reduce using rule 102 (element -> PHRASE .)
    RBRACKET        reduce using rule 102 (element -> PHRASE .)
    SEMICOLON       reduce using rule 102 (element -> PHRASE .)
    END             reduce using rule 102 (element -> PHRASE .)
    UNTIL           reduce using rule 102 (element -> PHRASE .)
    TO              reduce using rule 102 (element -> PHRASE .)
    DOWNTO          reduce using rule 102 (element -> PHRASE .)
    ELSE            reduce using rule 102 (element -> PHRASE .)
    RPAREN          reduce using rule 102 (element -> PHRASE .)
    COMMA           reduce using rule 102 (element -> PHRASE .)
    RANGE           reduce using rule 102 (element -> PHRASE .)


state 81

    (103) element -> LPAREN . expression RPAREN
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 127
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 82

    (104) element -> NOT . element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    element                        shift and go to state 128
    length_function                shift and go to state 83

state 83

    (105) element -> length_function .

    TIMES           reduce using rule 105 (element -> length_function .)
    DIVIDE          reduce using rule 105 (element -> length_function .)
    PLUS            reduce using rule 105 (element -> length_function .)
    MINUS           reduce using rule 105 (element -> length_function .)
    DIV             reduce using rule 105 (element -> length_function .)
    MOD             reduce using rule 105 (element -> length_function .)
    EQUALS          reduce using rule 105 (element -> length_function .)
    DIFFERENT       reduce using rule 105 (element -> length_function .)
    LESSTHAN        reduce using rule 105 (element -> length_function .)
    LESSEQUAL       reduce using rule 105 (element -> length_function .)
    GREATERTHAN     reduce using rule 105 (element -> length_function .)
    GREATEREQUAL    reduce using rule 105 (element -> length_function .)
    THEN            reduce using rule 105 (element -> length_function .)
    AND             reduce using rule 105 (element -> length_function .)
    OR              reduce using rule 105 (element -> length_function .)
    DO              reduce using rule 105 (element -> length_function .)
    OF              reduce using rule 105 (element -> length_function .)
    RBRACKET        reduce using rule 105 (element -> length_function .)
    SEMICOLON       reduce using rule 105 (element -> length_function .)
    END             reduce using rule 105 (element -> length_function .)
    UNTIL           reduce using rule 105 (element -> length_function .)
    TO              reduce using rule 105 (element -> length_function .)
    DOWNTO          reduce using rule 105 (element -> length_function .)
    ELSE            reduce using rule 105 (element -> length_function .)
    RPAREN          reduce using rule 105 (element -> length_function .)
    COMMA           reduce using rule 105 (element -> length_function .)
    RANGE           reduce using rule 105 (element -> length_function .)


state 84

    (98) length_function -> LENGTH . LPAREN expression RPAREN

    LPAREN          shift and go to state 129


state 85

    (73) while_statement -> WHILE expression . DO statement
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    DO              shift and go to state 130
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 86

    (74) repeat_statement -> REPEAT statement . UNTIL expression

    UNTIL           shift and go to state 131


state 87

    (75) for_statement -> FOR assignment_statement . TO expression DO statement
    (76) for_statement -> FOR assignment_statement . DOWNTO expression DO statement

    TO              shift and go to state 132
    DOWNTO          shift and go to state 133


state 88

    (77) assignment_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 71


state 89

    (60) writeln_statement -> WRITELN LPAREN . param_list RPAREN
    (61) writeln_statement -> WRITELN LPAREN . RPAREN
    (68) param_list -> . param_list COMMA param
    (69) param_list -> . param
    (70) param -> . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    RPAREN          shift and go to state 135
    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    param_list                     shift and go to state 134
    param                          shift and go to state 106
    expression                     shift and go to state 107
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 90

    (62) readln_statement -> READLN LPAREN . id_list RPAREN
    (63) readln_statement -> READLN LPAREN . RPAREN
    (12) id_list -> . ID
    (13) id_list -> . ID LBRACKET expression RBRACKET
    (14) id_list -> . ID COMMA id_list
    (15) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    RPAREN          shift and go to state 137
    ID              shift and go to state 26

    id_list                        shift and go to state 136

state 91

    (64) break_statement -> BREAK SEMICOLON .

    SEMICOLON       reduce using rule 64 (break_statement -> BREAK SEMICOLON .)
    END             reduce using rule 64 (break_statement -> BREAK SEMICOLON .)
    UNTIL           reduce using rule 64 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 64 (break_statement -> BREAK SEMICOLON .)


state 92

    (65) continue_statement -> CONTINUE SEMICOLON .

    SEMICOLON       reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    END             reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    UNTIL           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)


state 93

    (53) case_statement -> CASE expression . OF case_list END
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    OF              shift and go to state 138
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 94

    (20) procedure_declaration -> procedure_heading SEMICOLON block .

    SEMICOLON       reduce using rule 20 (procedure_declaration -> procedure_heading SEMICOLON block .)


state 95

    (23) function_declaration -> function_heading SEMICOLON block .

    SEMICOLON       reduce using rule 23 (function_declaration -> function_heading SEMICOLON block .)


state 96

    (22) procedure_heading -> PROCEDURE ID LPAREN . parameter_list RPAREN
    (27) parameter_list -> . parameter COMMA parameter_list
    (28) parameter_list -> . parameter
    (29) parameter -> . ID COLON type

    ID              shift and go to state 139

    parameter_list                 shift and go to state 140
    parameter                      shift and go to state 141

state 97

    (25) function_heading -> FUNCTION ID COLON . type
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 142
    array_type                     shift and go to state 61

state 98

    (26) function_heading -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type
    (27) parameter_list -> . parameter COMMA parameter_list
    (28) parameter_list -> . parameter
    (29) parameter -> . ID COLON type

    ID              shift and go to state 139

    parameter_list                 shift and go to state 143
    parameter                      shift and go to state 141

state 99

    (35) array_type -> ARRAY LBRACKET . range RBRACKET OF type
    (36) range -> . expression RANGE expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    range                          shift and go to state 144
    expression                     shift and go to state 145
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 100

    (11) variable_declaration -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 146


state 101

    (13) id_list -> ID LBRACKET expression . RBRACKET
    (15) id_list -> ID LBRACKET expression . RBRACKET COMMA id_list
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RBRACKET        shift and go to state 147
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 102

    (14) id_list -> ID COMMA id_list .

    COLON           reduce using rule 14 (id_list -> ID COMMA id_list .)
    RPAREN          reduce using rule 14 (id_list -> ID COMMA id_list .)


state 103

    (38) statement_sequence -> statement SEMICOLON statement_sequence .

    END             reduce using rule 38 (statement_sequence -> statement SEMICOLON statement_sequence .)


state 104

    (77) assignment_statement -> ID ASSIGN expression .
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    SEMICOLON       reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    UNTIL           reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    TO              reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    DOWNTO          reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 77 (assignment_statement -> ID ASSIGN expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 105

    (66) procedure_or_function_call -> ID LPAREN param_list . RPAREN
    (68) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 149


state 106

    (69) param_list -> param .

    RPAREN          reduce using rule 69 (param_list -> param .)
    COMMA           reduce using rule 69 (param_list -> param .)


state 107

    (70) param -> expression .
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RPAREN          reduce using rule 70 (param -> expression .)
    COMMA           reduce using rule 70 (param -> expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 108

    (71) if_statement -> IF expression THEN . statement ELSE statement
    (72) if_statement -> IF expression THEN . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 52 (statement -> .)
    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 150
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 109

    (78) expression -> expression and_or . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression_m                   shift and go to state 151
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 110

    (84) and_or -> AND .

    ID              reduce using rule 84 (and_or -> AND .)
    NUMBER          reduce using rule 84 (and_or -> AND .)
    BOOL            reduce using rule 84 (and_or -> AND .)
    PHRASE          reduce using rule 84 (and_or -> AND .)
    LPAREN          reduce using rule 84 (and_or -> AND .)
    NOT             reduce using rule 84 (and_or -> AND .)
    LENGTH          reduce using rule 84 (and_or -> AND .)


state 111

    (85) and_or -> OR .

    ID              reduce using rule 85 (and_or -> OR .)
    NUMBER          reduce using rule 85 (and_or -> OR .)
    BOOL            reduce using rule 85 (and_or -> OR .)
    PHRASE          reduce using rule 85 (and_or -> OR .)
    LPAREN          reduce using rule 85 (and_or -> OR .)
    NOT             reduce using rule 85 (and_or -> OR .)
    LENGTH          reduce using rule 85 (and_or -> OR .)


state 112

    (81) expression_m -> expression_m sign . expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression_s                   shift and go to state 152
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 113

    (88) sign -> PLUS .

    ID              reduce using rule 88 (sign -> PLUS .)
    NUMBER          reduce using rule 88 (sign -> PLUS .)
    BOOL            reduce using rule 88 (sign -> PLUS .)
    PHRASE          reduce using rule 88 (sign -> PLUS .)
    LPAREN          reduce using rule 88 (sign -> PLUS .)
    NOT             reduce using rule 88 (sign -> PLUS .)
    LENGTH          reduce using rule 88 (sign -> PLUS .)


state 114

    (89) sign -> MINUS .

    ID              reduce using rule 89 (sign -> MINUS .)
    NUMBER          reduce using rule 89 (sign -> MINUS .)
    BOOL            reduce using rule 89 (sign -> MINUS .)
    PHRASE          reduce using rule 89 (sign -> MINUS .)
    LPAREN          reduce using rule 89 (sign -> MINUS .)
    NOT             reduce using rule 89 (sign -> MINUS .)
    LENGTH          reduce using rule 89 (sign -> MINUS .)


state 115

    (90) sign -> DIV .

    ID              reduce using rule 90 (sign -> DIV .)
    NUMBER          reduce using rule 90 (sign -> DIV .)
    BOOL            reduce using rule 90 (sign -> DIV .)
    PHRASE          reduce using rule 90 (sign -> DIV .)
    LPAREN          reduce using rule 90 (sign -> DIV .)
    NOT             reduce using rule 90 (sign -> DIV .)
    LENGTH          reduce using rule 90 (sign -> DIV .)


state 116

    (91) sign -> MOD .

    ID              reduce using rule 91 (sign -> MOD .)
    NUMBER          reduce using rule 91 (sign -> MOD .)
    BOOL            reduce using rule 91 (sign -> MOD .)
    PHRASE          reduce using rule 91 (sign -> MOD .)
    LPAREN          reduce using rule 91 (sign -> MOD .)
    NOT             reduce using rule 91 (sign -> MOD .)
    LENGTH          reduce using rule 91 (sign -> MOD .)


state 117

    (92) sign -> EQUALS .

    ID              reduce using rule 92 (sign -> EQUALS .)
    NUMBER          reduce using rule 92 (sign -> EQUALS .)
    BOOL            reduce using rule 92 (sign -> EQUALS .)
    PHRASE          reduce using rule 92 (sign -> EQUALS .)
    LPAREN          reduce using rule 92 (sign -> EQUALS .)
    NOT             reduce using rule 92 (sign -> EQUALS .)
    LENGTH          reduce using rule 92 (sign -> EQUALS .)


state 118

    (93) sign -> DIFFERENT .

    ID              reduce using rule 93 (sign -> DIFFERENT .)
    NUMBER          reduce using rule 93 (sign -> DIFFERENT .)
    BOOL            reduce using rule 93 (sign -> DIFFERENT .)
    PHRASE          reduce using rule 93 (sign -> DIFFERENT .)
    LPAREN          reduce using rule 93 (sign -> DIFFERENT .)
    NOT             reduce using rule 93 (sign -> DIFFERENT .)
    LENGTH          reduce using rule 93 (sign -> DIFFERENT .)


state 119

    (94) sign -> LESSTHAN .

    ID              reduce using rule 94 (sign -> LESSTHAN .)
    NUMBER          reduce using rule 94 (sign -> LESSTHAN .)
    BOOL            reduce using rule 94 (sign -> LESSTHAN .)
    PHRASE          reduce using rule 94 (sign -> LESSTHAN .)
    LPAREN          reduce using rule 94 (sign -> LESSTHAN .)
    NOT             reduce using rule 94 (sign -> LESSTHAN .)
    LENGTH          reduce using rule 94 (sign -> LESSTHAN .)


state 120

    (95) sign -> LESSEQUAL .

    ID              reduce using rule 95 (sign -> LESSEQUAL .)
    NUMBER          reduce using rule 95 (sign -> LESSEQUAL .)
    BOOL            reduce using rule 95 (sign -> LESSEQUAL .)
    PHRASE          reduce using rule 95 (sign -> LESSEQUAL .)
    LPAREN          reduce using rule 95 (sign -> LESSEQUAL .)
    NOT             reduce using rule 95 (sign -> LESSEQUAL .)
    LENGTH          reduce using rule 95 (sign -> LESSEQUAL .)


state 121

    (96) sign -> GREATERTHAN .

    ID              reduce using rule 96 (sign -> GREATERTHAN .)
    NUMBER          reduce using rule 96 (sign -> GREATERTHAN .)
    BOOL            reduce using rule 96 (sign -> GREATERTHAN .)
    PHRASE          reduce using rule 96 (sign -> GREATERTHAN .)
    LPAREN          reduce using rule 96 (sign -> GREATERTHAN .)
    NOT             reduce using rule 96 (sign -> GREATERTHAN .)
    LENGTH          reduce using rule 96 (sign -> GREATERTHAN .)


state 122

    (97) sign -> GREATEREQUAL .

    ID              reduce using rule 97 (sign -> GREATEREQUAL .)
    NUMBER          reduce using rule 97 (sign -> GREATEREQUAL .)
    BOOL            reduce using rule 97 (sign -> GREATEREQUAL .)
    PHRASE          reduce using rule 97 (sign -> GREATEREQUAL .)
    LPAREN          reduce using rule 97 (sign -> GREATEREQUAL .)
    NOT             reduce using rule 97 (sign -> GREATEREQUAL .)
    LENGTH          reduce using rule 97 (sign -> GREATEREQUAL .)


state 123

    (83) expression_s -> expression_s psign . element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    element                        shift and go to state 153
    length_function                shift and go to state 83

state 124

    (86) psign -> TIMES .

    ID              reduce using rule 86 (psign -> TIMES .)
    NUMBER          reduce using rule 86 (psign -> TIMES .)
    BOOL            reduce using rule 86 (psign -> TIMES .)
    PHRASE          reduce using rule 86 (psign -> TIMES .)
    LPAREN          reduce using rule 86 (psign -> TIMES .)
    NOT             reduce using rule 86 (psign -> TIMES .)
    LENGTH          reduce using rule 86 (psign -> TIMES .)


state 125

    (87) psign -> DIVIDE .

    ID              reduce using rule 87 (psign -> DIVIDE .)
    NUMBER          reduce using rule 87 (psign -> DIVIDE .)
    BOOL            reduce using rule 87 (psign -> DIVIDE .)
    PHRASE          reduce using rule 87 (psign -> DIVIDE .)
    LPAREN          reduce using rule 87 (psign -> DIVIDE .)
    NOT             reduce using rule 87 (psign -> DIVIDE .)
    LENGTH          reduce using rule 87 (psign -> DIVIDE .)


state 126

    (106) element -> ID LBRACKET . expression RBRACKET
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 154
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 127

    (103) element -> LPAREN expression . RPAREN
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RPAREN          shift and go to state 155
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 128

    (104) element -> NOT element .

    TIMES           reduce using rule 104 (element -> NOT element .)
    DIVIDE          reduce using rule 104 (element -> NOT element .)
    PLUS            reduce using rule 104 (element -> NOT element .)
    MINUS           reduce using rule 104 (element -> NOT element .)
    DIV             reduce using rule 104 (element -> NOT element .)
    MOD             reduce using rule 104 (element -> NOT element .)
    EQUALS          reduce using rule 104 (element -> NOT element .)
    DIFFERENT       reduce using rule 104 (element -> NOT element .)
    LESSTHAN        reduce using rule 104 (element -> NOT element .)
    LESSEQUAL       reduce using rule 104 (element -> NOT element .)
    GREATERTHAN     reduce using rule 104 (element -> NOT element .)
    GREATEREQUAL    reduce using rule 104 (element -> NOT element .)
    THEN            reduce using rule 104 (element -> NOT element .)
    AND             reduce using rule 104 (element -> NOT element .)
    OR              reduce using rule 104 (element -> NOT element .)
    DO              reduce using rule 104 (element -> NOT element .)
    OF              reduce using rule 104 (element -> NOT element .)
    RBRACKET        reduce using rule 104 (element -> NOT element .)
    SEMICOLON       reduce using rule 104 (element -> NOT element .)
    END             reduce using rule 104 (element -> NOT element .)
    UNTIL           reduce using rule 104 (element -> NOT element .)
    TO              reduce using rule 104 (element -> NOT element .)
    DOWNTO          reduce using rule 104 (element -> NOT element .)
    ELSE            reduce using rule 104 (element -> NOT element .)
    RPAREN          reduce using rule 104 (element -> NOT element .)
    COMMA           reduce using rule 104 (element -> NOT element .)
    RANGE           reduce using rule 104 (element -> NOT element .)


state 129

    (98) length_function -> LENGTH LPAREN . expression RPAREN
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 156
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 130

    (73) while_statement -> WHILE expression DO . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 52 (statement -> .)
    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 157
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 131

    (74) repeat_statement -> REPEAT statement UNTIL . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 158
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 132

    (75) for_statement -> FOR assignment_statement TO . expression DO statement
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 159
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 133

    (76) for_statement -> FOR assignment_statement DOWNTO . expression DO statement
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 160
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 134

    (60) writeln_statement -> WRITELN LPAREN param_list . RPAREN
    (68) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 161
    COMMA           shift and go to state 149


state 135

    (61) writeln_statement -> WRITELN LPAREN RPAREN .

    SEMICOLON       reduce using rule 61 (writeln_statement -> WRITELN LPAREN RPAREN .)
    END             reduce using rule 61 (writeln_statement -> WRITELN LPAREN RPAREN .)
    UNTIL           reduce using rule 61 (writeln_statement -> WRITELN LPAREN RPAREN .)
    ELSE            reduce using rule 61 (writeln_statement -> WRITELN LPAREN RPAREN .)


state 136

    (62) readln_statement -> READLN LPAREN id_list . RPAREN

    RPAREN          shift and go to state 162


state 137

    (63) readln_statement -> READLN LPAREN RPAREN .

    SEMICOLON       reduce using rule 63 (readln_statement -> READLN LPAREN RPAREN .)
    END             reduce using rule 63 (readln_statement -> READLN LPAREN RPAREN .)
    UNTIL           reduce using rule 63 (readln_statement -> READLN LPAREN RPAREN .)
    ELSE            reduce using rule 63 (readln_statement -> READLN LPAREN RPAREN .)


state 138

    (53) case_statement -> CASE expression OF . case_list END
    (54) case_list -> . case_option SEMICOLON case_list
    (55) case_list -> . case_option SEMICOLON
    (56) case_option -> . NUMBER COLON statement
    (57) case_option -> . BOOL COLON statement
    (58) case_option -> . PHRASE COLON statement
    (59) case_option -> . ID COLON statement

    NUMBER          shift and go to state 165
    BOOL            shift and go to state 166
    PHRASE          shift and go to state 167
    ID              shift and go to state 168

    case_list                      shift and go to state 163
    case_option                    shift and go to state 164

state 139

    (29) parameter -> ID . COLON type

    COLON           shift and go to state 169


state 140

    (22) procedure_heading -> PROCEDURE ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 170


state 141

    (27) parameter_list -> parameter . COMMA parameter_list
    (28) parameter_list -> parameter .

    COMMA           shift and go to state 171
    RPAREN          reduce using rule 28 (parameter_list -> parameter .)


state 142

    (25) function_heading -> FUNCTION ID COLON type .

    SEMICOLON       reduce using rule 25 (function_heading -> FUNCTION ID COLON type .)


state 143

    (26) function_heading -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type

    RPAREN          shift and go to state 172


state 144

    (35) array_type -> ARRAY LBRACKET range . RBRACKET OF type

    RBRACKET        shift and go to state 173


state 145

    (36) range -> expression . RANGE expression
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RANGE           shift and go to state 174
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 146

    (11) variable_declaration -> id_list COLON type SEMICOLON .

    ID              reduce using rule 11 (variable_declaration -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 11 (variable_declaration -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 11 (variable_declaration -> id_list COLON type SEMICOLON .)
    FUNCTION        reduce using rule 11 (variable_declaration -> id_list COLON type SEMICOLON .)


state 147

    (13) id_list -> ID LBRACKET expression RBRACKET .
    (15) id_list -> ID LBRACKET expression RBRACKET . COMMA id_list

    COLON           reduce using rule 13 (id_list -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 13 (id_list -> ID LBRACKET expression RBRACKET .)
    COMMA           shift and go to state 175


state 148

    (66) procedure_or_function_call -> ID LPAREN param_list RPAREN .

    SEMICOLON       reduce using rule 66 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    END             reduce using rule 66 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    UNTIL           reduce using rule 66 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    ELSE            reduce using rule 66 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)


state 149

    (68) param_list -> param_list COMMA . param
    (70) param -> . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    param                          shift and go to state 176
    expression                     shift and go to state 107
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 150

    (71) if_statement -> IF expression THEN statement . ELSE statement
    (72) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 177
    SEMICOLON       reduce using rule 72 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 72 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 72 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 72 (if_statement -> IF expression THEN statement .) ]


state 151

    (78) expression -> expression and_or expression_m .
    (81) expression_m -> expression_m . sign expression_s
    (88) sign -> . PLUS
    (89) sign -> . MINUS
    (90) sign -> . DIV
    (91) sign -> . MOD
    (92) sign -> . EQUALS
    (93) sign -> . DIFFERENT
    (94) sign -> . LESSTHAN
    (95) sign -> . LESSEQUAL
    (96) sign -> . GREATERTHAN
    (97) sign -> . GREATEREQUAL

    THEN            reduce using rule 78 (expression -> expression and_or expression_m .)
    AND             reduce using rule 78 (expression -> expression and_or expression_m .)
    OR              reduce using rule 78 (expression -> expression and_or expression_m .)
    DO              reduce using rule 78 (expression -> expression and_or expression_m .)
    OF              reduce using rule 78 (expression -> expression and_or expression_m .)
    RBRACKET        reduce using rule 78 (expression -> expression and_or expression_m .)
    SEMICOLON       reduce using rule 78 (expression -> expression and_or expression_m .)
    END             reduce using rule 78 (expression -> expression and_or expression_m .)
    UNTIL           reduce using rule 78 (expression -> expression and_or expression_m .)
    TO              reduce using rule 78 (expression -> expression and_or expression_m .)
    DOWNTO          reduce using rule 78 (expression -> expression and_or expression_m .)
    ELSE            reduce using rule 78 (expression -> expression and_or expression_m .)
    RPAREN          reduce using rule 78 (expression -> expression and_or expression_m .)
    COMMA           reduce using rule 78 (expression -> expression and_or expression_m .)
    RANGE           reduce using rule 78 (expression -> expression and_or expression_m .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    DIV             shift and go to state 115
    MOD             shift and go to state 116
    EQUALS          shift and go to state 117
    DIFFERENT       shift and go to state 118
    LESSTHAN        shift and go to state 119
    LESSEQUAL       shift and go to state 120
    GREATERTHAN     shift and go to state 121
    GREATEREQUAL    shift and go to state 122

    sign                           shift and go to state 112

state 152

    (81) expression_m -> expression_m sign expression_s .
    (83) expression_s -> expression_s . psign element
    (86) psign -> . TIMES
    (87) psign -> . DIVIDE

    PLUS            reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    MINUS           reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    DIV             reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    MOD             reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    EQUALS          reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    DIFFERENT       reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    LESSTHAN        reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    LESSEQUAL       reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    GREATERTHAN     reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    GREATEREQUAL    reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    THEN            reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    AND             reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    OR              reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    DO              reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    OF              reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    RBRACKET        reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    SEMICOLON       reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    END             reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    UNTIL           reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    TO              reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    DOWNTO          reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    ELSE            reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    RPAREN          reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    COMMA           reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    RANGE           reduce using rule 81 (expression_m -> expression_m sign expression_s .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125

    psign                          shift and go to state 123

state 153

    (83) expression_s -> expression_s psign element .

    TIMES           reduce using rule 83 (expression_s -> expression_s psign element .)
    DIVIDE          reduce using rule 83 (expression_s -> expression_s psign element .)
    PLUS            reduce using rule 83 (expression_s -> expression_s psign element .)
    MINUS           reduce using rule 83 (expression_s -> expression_s psign element .)
    DIV             reduce using rule 83 (expression_s -> expression_s psign element .)
    MOD             reduce using rule 83 (expression_s -> expression_s psign element .)
    EQUALS          reduce using rule 83 (expression_s -> expression_s psign element .)
    DIFFERENT       reduce using rule 83 (expression_s -> expression_s psign element .)
    LESSTHAN        reduce using rule 83 (expression_s -> expression_s psign element .)
    LESSEQUAL       reduce using rule 83 (expression_s -> expression_s psign element .)
    GREATERTHAN     reduce using rule 83 (expression_s -> expression_s psign element .)
    GREATEREQUAL    reduce using rule 83 (expression_s -> expression_s psign element .)
    THEN            reduce using rule 83 (expression_s -> expression_s psign element .)
    AND             reduce using rule 83 (expression_s -> expression_s psign element .)
    OR              reduce using rule 83 (expression_s -> expression_s psign element .)
    DO              reduce using rule 83 (expression_s -> expression_s psign element .)
    OF              reduce using rule 83 (expression_s -> expression_s psign element .)
    RBRACKET        reduce using rule 83 (expression_s -> expression_s psign element .)
    SEMICOLON       reduce using rule 83 (expression_s -> expression_s psign element .)
    END             reduce using rule 83 (expression_s -> expression_s psign element .)
    UNTIL           reduce using rule 83 (expression_s -> expression_s psign element .)
    TO              reduce using rule 83 (expression_s -> expression_s psign element .)
    DOWNTO          reduce using rule 83 (expression_s -> expression_s psign element .)
    ELSE            reduce using rule 83 (expression_s -> expression_s psign element .)
    RPAREN          reduce using rule 83 (expression_s -> expression_s psign element .)
    COMMA           reduce using rule 83 (expression_s -> expression_s psign element .)
    RANGE           reduce using rule 83 (expression_s -> expression_s psign element .)


state 154

    (106) element -> ID LBRACKET expression . RBRACKET
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RBRACKET        shift and go to state 178
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 155

    (103) element -> LPAREN expression RPAREN .

    TIMES           reduce using rule 103 (element -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 103 (element -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 103 (element -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 103 (element -> LPAREN expression RPAREN .)
    DIV             reduce using rule 103 (element -> LPAREN expression RPAREN .)
    MOD             reduce using rule 103 (element -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 103 (element -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 103 (element -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 103 (element -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 103 (element -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 103 (element -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 103 (element -> LPAREN expression RPAREN .)
    THEN            reduce using rule 103 (element -> LPAREN expression RPAREN .)
    AND             reduce using rule 103 (element -> LPAREN expression RPAREN .)
    OR              reduce using rule 103 (element -> LPAREN expression RPAREN .)
    DO              reduce using rule 103 (element -> LPAREN expression RPAREN .)
    OF              reduce using rule 103 (element -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 103 (element -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 103 (element -> LPAREN expression RPAREN .)
    END             reduce using rule 103 (element -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 103 (element -> LPAREN expression RPAREN .)
    TO              reduce using rule 103 (element -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 103 (element -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 103 (element -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (element -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (element -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 103 (element -> LPAREN expression RPAREN .)


state 156

    (98) length_function -> LENGTH LPAREN expression . RPAREN
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RPAREN          shift and go to state 179
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 157

    (73) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 73 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 73 (while_statement -> WHILE expression DO statement .)


state 158

    (74) repeat_statement -> REPEAT statement UNTIL expression .
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    SEMICOLON       reduce using rule 74 (repeat_statement -> REPEAT statement UNTIL expression .)
    END             reduce using rule 74 (repeat_statement -> REPEAT statement UNTIL expression .)
    UNTIL           reduce using rule 74 (repeat_statement -> REPEAT statement UNTIL expression .)
    ELSE            reduce using rule 74 (repeat_statement -> REPEAT statement UNTIL expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 159

    (75) for_statement -> FOR assignment_statement TO expression . DO statement
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    DO              shift and go to state 180
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 160

    (76) for_statement -> FOR assignment_statement DOWNTO expression . DO statement
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    DO              shift and go to state 181
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 161

    (60) writeln_statement -> WRITELN LPAREN param_list RPAREN .

    SEMICOLON       reduce using rule 60 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    END             reduce using rule 60 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    UNTIL           reduce using rule 60 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    ELSE            reduce using rule 60 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)


state 162

    (62) readln_statement -> READLN LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 62 (readln_statement -> READLN LPAREN id_list RPAREN .)
    END             reduce using rule 62 (readln_statement -> READLN LPAREN id_list RPAREN .)
    UNTIL           reduce using rule 62 (readln_statement -> READLN LPAREN id_list RPAREN .)
    ELSE            reduce using rule 62 (readln_statement -> READLN LPAREN id_list RPAREN .)


state 163

    (53) case_statement -> CASE expression OF case_list . END

    END             shift and go to state 182


state 164

    (54) case_list -> case_option . SEMICOLON case_list
    (55) case_list -> case_option . SEMICOLON

    SEMICOLON       shift and go to state 183


state 165

    (56) case_option -> NUMBER . COLON statement

    COLON           shift and go to state 184


state 166

    (57) case_option -> BOOL . COLON statement

    COLON           shift and go to state 185


state 167

    (58) case_option -> PHRASE . COLON statement

    COLON           shift and go to state 186


state 168

    (59) case_option -> ID . COLON statement

    COLON           shift and go to state 187


state 169

    (29) parameter -> ID COLON . type
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 188
    array_type                     shift and go to state 61

state 170

    (22) procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 22 (procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .)


state 171

    (27) parameter_list -> parameter COMMA . parameter_list
    (27) parameter_list -> . parameter COMMA parameter_list
    (28) parameter_list -> . parameter
    (29) parameter -> . ID COLON type

    ID              shift and go to state 139

    parameter                      shift and go to state 141
    parameter_list                 shift and go to state 189

state 172

    (26) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type

    COLON           shift and go to state 190


state 173

    (35) array_type -> ARRAY LBRACKET range RBRACKET . OF type

    OF              shift and go to state 191


state 174

    (36) range -> expression RANGE . expression
    (78) expression -> . expression and_or expression_m
    (79) expression -> . expression_m
    (80) expression_m -> . expression_s
    (81) expression_m -> . expression_m sign expression_s
    (82) expression_s -> . element
    (83) expression_s -> . expression_s psign element
    (99) element -> . ID
    (100) element -> . NUMBER
    (101) element -> . BOOL
    (102) element -> . PHRASE
    (103) element -> . LPAREN expression RPAREN
    (104) element -> . NOT element
    (105) element -> . length_function
    (106) element -> . ID LBRACKET expression RBRACKET
    (98) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 77
    NUMBER          shift and go to state 78
    BOOL            shift and go to state 79
    PHRASE          shift and go to state 80
    LPAREN          shift and go to state 81
    NOT             shift and go to state 82
    LENGTH          shift and go to state 84

    expression                     shift and go to state 192
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 83

state 175

    (15) id_list -> ID LBRACKET expression RBRACKET COMMA . id_list
    (12) id_list -> . ID
    (13) id_list -> . ID LBRACKET expression RBRACKET
    (14) id_list -> . ID COMMA id_list
    (15) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 26

    id_list                        shift and go to state 193

state 176

    (68) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 68 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 68 (param_list -> param_list COMMA param .)


state 177

    (71) if_statement -> IF expression THEN statement ELSE . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 52 (statement -> .)
    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 194
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 178

    (106) element -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    OF              reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 106 (element -> ID LBRACKET expression RBRACKET .)


state 179

    (98) length_function -> LENGTH LPAREN expression RPAREN .

    TIMES           reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    PLUS            reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    MINUS           reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIV             reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    MOD             reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    EQUALS          reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    THEN            reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    AND             reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    OR              reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    DO              reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    OF              reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    END             reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    UNTIL           reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    TO              reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    ELSE            reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    RPAREN          reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    COMMA           reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)
    RANGE           reduce using rule 98 (length_function -> LENGTH LPAREN expression RPAREN .)


state 180

    (75) for_statement -> FOR assignment_statement TO expression DO . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 52 (statement -> .)
    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    assignment_statement           shift and go to state 30
    statement                      shift and go to state 195
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 181

    (76) for_statement -> FOR assignment_statement DOWNTO expression DO . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 52 (statement -> .)
    SEMICOLON       reduce using rule 52 (statement -> .)
    END             reduce using rule 52 (statement -> .)
    UNTIL           reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    assignment_statement           shift and go to state 30
    statement                      shift and go to state 196
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 182

    (53) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 53 (case_statement -> CASE expression OF case_list END .)
    END             reduce using rule 53 (case_statement -> CASE expression OF case_list END .)
    UNTIL           reduce using rule 53 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 53 (case_statement -> CASE expression OF case_list END .)


state 183

    (54) case_list -> case_option SEMICOLON . case_list
    (55) case_list -> case_option SEMICOLON .
    (54) case_list -> . case_option SEMICOLON case_list
    (55) case_list -> . case_option SEMICOLON
    (56) case_option -> . NUMBER COLON statement
    (57) case_option -> . BOOL COLON statement
    (58) case_option -> . PHRASE COLON statement
    (59) case_option -> . ID COLON statement

    END             reduce using rule 55 (case_list -> case_option SEMICOLON .)
    NUMBER          shift and go to state 165
    BOOL            shift and go to state 166
    PHRASE          shift and go to state 167
    ID              shift and go to state 168

    case_option                    shift and go to state 164
    case_list                      shift and go to state 197

state 184

    (56) case_option -> NUMBER COLON . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 198
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 185

    (57) case_option -> BOOL COLON . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 199
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 186

    (58) case_option -> PHRASE COLON . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 200
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 187

    (59) case_option -> ID COLON . statement
    (40) statement -> . assignment_statement
    (41) statement -> . statement_part
    (42) statement -> . if_statement
    (43) statement -> . while_statement
    (44) statement -> . repeat_statement
    (45) statement -> . for_statement
    (46) statement -> . procedure_or_function_call
    (47) statement -> . writeln_statement
    (48) statement -> . readln_statement
    (49) statement -> . break_statement
    (50) statement -> . continue_statement
    (51) statement -> . case_statement
    (52) statement -> .
    (77) assignment_statement -> . ID ASSIGN expression
    (37) statement_part -> . BEGIN statement_sequence END
    (71) if_statement -> . IF expression THEN statement ELSE statement
    (72) if_statement -> . IF expression THEN statement
    (73) while_statement -> . WHILE expression DO statement
    (74) repeat_statement -> . REPEAT statement UNTIL expression
    (75) for_statement -> . FOR assignment_statement TO expression DO statement
    (76) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (66) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (67) procedure_or_function_call -> . ID
    (60) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (61) writeln_statement -> . WRITELN LPAREN RPAREN
    (62) readln_statement -> . READLN LPAREN id_list RPAREN
    (63) readln_statement -> . READLN LPAREN RPAREN
    (64) break_statement -> . BREAK SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (53) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 52 (statement -> .)
    ID              shift and go to state 42
    BEGIN           shift and go to state 12
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    REPEAT          shift and go to state 45
    FOR             shift and go to state 46
    WRITELN         shift and go to state 47
    READLN          shift and go to state 48
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 50
    CASE            shift and go to state 51

    statement                      shift and go to state 201
    assignment_statement           shift and go to state 30
    statement_part                 shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    repeat_statement               shift and go to state 34
    for_statement                  shift and go to state 35
    procedure_or_function_call     shift and go to state 36
    writeln_statement              shift and go to state 37
    readln_statement               shift and go to state 38
    break_statement                shift and go to state 39
    continue_statement             shift and go to state 40
    case_statement                 shift and go to state 41

state 188

    (29) parameter -> ID COLON type .

    COMMA           reduce using rule 29 (parameter -> ID COLON type .)
    RPAREN          reduce using rule 29 (parameter -> ID COLON type .)


state 189

    (27) parameter_list -> parameter COMMA parameter_list .

    RPAREN          reduce using rule 27 (parameter_list -> parameter COMMA parameter_list .)


state 190

    (26) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 202
    array_type                     shift and go to state 61

state 191

    (35) array_type -> ARRAY LBRACKET range RBRACKET OF . type
    (30) type -> . REAL
    (31) type -> . INTEGER
    (32) type -> . BOOLEAN
    (33) type -> . STRING
    (34) type -> . array_type
    (35) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 57
    INTEGER         shift and go to state 58
    BOOLEAN         shift and go to state 59
    STRING          shift and go to state 60
    ARRAY           shift and go to state 62

    type                           shift and go to state 203
    array_type                     shift and go to state 61

state 192

    (36) range -> expression RANGE expression .
    (78) expression -> expression . and_or expression_m
    (84) and_or -> . AND
    (85) and_or -> . OR

    RBRACKET        reduce using rule 36 (range -> expression RANGE expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 193

    (15) id_list -> ID LBRACKET expression RBRACKET COMMA id_list .

    COLON           reduce using rule 15 (id_list -> ID LBRACKET expression RBRACKET COMMA id_list .)
    RPAREN          reduce using rule 15 (id_list -> ID LBRACKET expression RBRACKET COMMA id_list .)


state 194

    (71) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 71 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 71 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 71 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 71 (if_statement -> IF expression THEN statement ELSE statement .)


state 195

    (75) for_statement -> FOR assignment_statement TO expression DO statement .

    SEMICOLON       reduce using rule 75 (for_statement -> FOR assignment_statement TO expression DO statement .)
    END             reduce using rule 75 (for_statement -> FOR assignment_statement TO expression DO statement .)
    UNTIL           reduce using rule 75 (for_statement -> FOR assignment_statement TO expression DO statement .)
    ELSE            reduce using rule 75 (for_statement -> FOR assignment_statement TO expression DO statement .)


state 196

    (76) for_statement -> FOR assignment_statement DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 76 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    END             reduce using rule 76 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    UNTIL           reduce using rule 76 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    ELSE            reduce using rule 76 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)


state 197

    (54) case_list -> case_option SEMICOLON case_list .

    END             reduce using rule 54 (case_list -> case_option SEMICOLON case_list .)


state 198

    (56) case_option -> NUMBER COLON statement .

    SEMICOLON       reduce using rule 56 (case_option -> NUMBER COLON statement .)


state 199

    (57) case_option -> BOOL COLON statement .

    SEMICOLON       reduce using rule 57 (case_option -> BOOL COLON statement .)


state 200

    (58) case_option -> PHRASE COLON statement .

    SEMICOLON       reduce using rule 58 (case_option -> PHRASE COLON statement .)


state 201

    (59) case_option -> ID COLON statement .

    SEMICOLON       reduce using rule 59 (case_option -> ID COLON statement .)


state 202

    (26) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .

    SEMICOLON       reduce using rule 26 (function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .)


state 203

    (35) array_type -> ARRAY LBRACKET range RBRACKET OF type .

    SEMICOLON       reduce using rule 35 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    COMMA           reduce using rule 35 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    RPAREN          reduce using rule 35 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEGIN in state 4 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 4 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 4 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 7 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 52 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 53 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 53 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 150 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (variable_declaration_part -> <empty>)
WARNING: rejected rule (procedure_or_function -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 52 resolved using rule (variable_declaration_part -> <empty>)
WARNING: rejected rule (procedure_or_function -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 53 resolved using rule (variable_declaration_part -> <empty>)
WARNING: rejected rule (procedure_or_function -> <empty>) in state 53
