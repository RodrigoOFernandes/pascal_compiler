Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> header SEMICOLON block DOT
Rule 2     header -> PROGRAM ID
Rule 3     block -> variable_declaration_part procedure_or_function statement_part
Rule 4     variable_declaration_part -> VAR variable_declaration_list
Rule 5     variable_declaration_part -> <empty>
Rule 6     variable_declaration_list -> variable_declaration_list variable_declaration
Rule 7     variable_declaration_list -> variable_declaration
Rule 8     variable_declaration -> id_list COLON type SEMICOLON
Rule 9     id_list -> ID
Rule 10    id_list -> ID LBRACKET expression RBRACKET
Rule 11    id_list -> ID COMMA id_list
Rule 12    id_list -> ID LBRACKET expression RBRACKET COMMA id_list
Rule 13    procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function
Rule 14    procedure_or_function -> <empty>
Rule 15    proc_or_func_declaration -> procedure_declaration
Rule 16    proc_or_func_declaration -> function_declaration
Rule 17    procedure_declaration -> procedure_heading SEMICOLON block
Rule 18    procedure_heading -> PROCEDURE ID
Rule 19    procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN
Rule 20    function_declaration -> function_heading SEMICOLON block
Rule 21    function_heading -> FUNCTION type
Rule 22    function_heading -> FUNCTION ID COLON type
Rule 23    function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type
Rule 24    parameter_list -> parameter COMMA parameter_list
Rule 25    parameter_list -> parameter
Rule 26    parameter -> ID COLON type
Rule 27    type -> REAL
Rule 28    type -> INTEGER
Rule 29    type -> BOOLEAN
Rule 30    type -> STRING
Rule 31    type -> array_type
Rule 32    array_type -> ARRAY LBRACKET range RBRACKET OF type
Rule 33    range -> expression RANGE expression
Rule 34    statement_part -> BEGIN statement_sequence END
Rule 35    statement_sequence -> statement SEMICOLON statement_sequence
Rule 36    statement_sequence -> statement
Rule 37    statement -> assignment_statement
Rule 38    statement -> statement_part
Rule 39    statement -> if_statement
Rule 40    statement -> while_statement
Rule 41    statement -> repeat_statement
Rule 42    statement -> for_statement
Rule 43    statement -> procedure_or_function_call
Rule 44    statement -> writeln_statement
Rule 45    statement -> readln_statement
Rule 46    statement -> break_statement
Rule 47    statement -> continue_statement
Rule 48    statement -> case_statement
Rule 49    statement -> <empty>
Rule 50    case_statement -> CASE expression OF case_list END
Rule 51    case_list -> case_option SEMICOLON case_list
Rule 52    case_list -> case_option SEMICOLON
Rule 53    case_option -> NUMBER COLON statement
Rule 54    case_option -> BOOL COLON statement
Rule 55    case_option -> PHRASE COLON statement
Rule 56    case_option -> ID COLON statement
Rule 57    writeln_statement -> WRITELN LPAREN param_list RPAREN
Rule 58    writeln_statement -> WRITELN LPAREN RPAREN
Rule 59    readln_statement -> READLN LPAREN id_list RPAREN
Rule 60    readln_statement -> READLN LPAREN RPAREN
Rule 61    break_statement -> BREAK SEMICOLON
Rule 62    continue_statement -> CONTINUE SEMICOLON
Rule 63    procedure_or_function_call -> ID LPAREN param_list RPAREN
Rule 64    procedure_or_function_call -> ID
Rule 65    param_list -> param_list COMMA param
Rule 66    param_list -> param
Rule 67    param -> expression
Rule 68    if_statement -> IF expression THEN statement ELSE statement
Rule 69    if_statement -> IF expression THEN statement
Rule 70    while_statement -> WHILE expression DO statement
Rule 71    repeat_statement -> REPEAT statement UNTIL expression
Rule 72    for_statement -> FOR assignment_statement TO expression DO statement
Rule 73    for_statement -> FOR assignment_statement DOWNTO expression DO statement
Rule 74    assignment_statement -> ID ASSIGN expression
Rule 75    expression -> expression and_or expression_m
Rule 76    expression -> expression_m
Rule 77    expression_m -> expression_s
Rule 78    expression_m -> expression_m sign expression_s
Rule 79    expression_s -> element
Rule 80    expression_s -> expression_s psign element
Rule 81    and_or -> AND
Rule 82    and_or -> OR
Rule 83    psign -> TIMES
Rule 84    psign -> DIVIDE
Rule 85    sign -> PLUS
Rule 86    sign -> MINUS
Rule 87    sign -> DIV
Rule 88    sign -> MOD
Rule 89    sign -> EQUALS
Rule 90    sign -> DIFFERENT
Rule 91    sign -> LESSTHAN
Rule 92    sign -> LESSEQUAL
Rule 93    sign -> GREATERTHAN
Rule 94    sign -> GREATEREQUAL
Rule 95    length_function -> LENGTH LPAREN expression RPAREN
Rule 96    element -> ID
Rule 97    element -> NUMBER
Rule 98    element -> BOOL
Rule 99    element -> PHRASE
Rule 100   element -> LPAREN expression RPAREN
Rule 101   element -> NOT element
Rule 102   element -> length_function
Rule 103   element -> ID LBRACKET expression RBRACKET

Terminals, with rules where they appear

AND                  : 81
ARRAY                : 32
ASSIGN               : 74
BEGIN                : 34
BOOL                 : 54 98
BOOLEAN              : 29
BREAK                : 61
CASE                 : 50
COLON                : 8 22 23 26 53 54 55 56
COMMA                : 11 12 24 65
CONTINUE             : 62
DIFFERENT            : 90
DIV                  : 87
DIVIDE               : 84
DO                   : 70 72 73
DOT                  : 1
DOWNTO               : 73
ELSE                 : 68
END                  : 34 50
EQUALS               : 89
FOR                  : 72 73
FUNCTION             : 21 22 23
GREATEREQUAL         : 94
GREATERTHAN          : 93
ID                   : 2 9 10 11 12 18 19 22 23 26 56 63 64 74 96 103
IF                   : 68 69
INTEGER              : 28
LBRACKET             : 10 12 32 103
LENGTH               : 95
LESSEQUAL            : 92
LESSTHAN             : 91
LPAREN               : 19 23 57 58 59 60 63 95 100
MINUS                : 86
MOD                  : 88
NOT                  : 101
NUMBER               : 53 97
OF                   : 32 50
OR                   : 82
PHRASE               : 55 99
PLUS                 : 85
PROCEDURE            : 18 19
PROGRAM              : 2
RANGE                : 33
RBRACKET             : 10 12 32 103
READLN               : 59 60
REAL                 : 27
REPEAT               : 71
RPAREN               : 19 23 57 58 59 60 63 95 100
SEMICOLON            : 1 8 13 17 20 35 51 52 61 62
STRING               : 30
THEN                 : 68 69
TIMES                : 83
TO                   : 72
UNTIL                : 71
VAR                  : 4
WHILE                : 70
WRITELN              : 57 58
error                : 

Nonterminals, with rules where they appear

and_or               : 75
array_type           : 31
assignment_statement : 37 72 73
block                : 1 17 20
break_statement      : 46
case_list            : 50 51
case_option          : 51 52
case_statement       : 48
continue_statement   : 47
element              : 79 80 101
expression           : 10 12 33 33 50 67 68 69 70 71 72 73 74 75 95 100 103
expression_m         : 75 76 78
expression_s         : 77 78 80
for_statement        : 42
function_declaration : 16
function_heading     : 20
header               : 1
id_list              : 8 11 12 59
if_statement         : 39
length_function      : 102
param                : 65 66
param_list           : 57 63 65
parameter            : 24 25
parameter_list       : 19 23 24
proc_or_func_declaration : 13
procedure_declaration : 15
procedure_heading    : 17
procedure_or_function : 3 13
procedure_or_function_call : 43
program              : 0
psign                : 80
range                : 32
readln_statement     : 45
repeat_statement     : 41
sign                 : 78
statement            : 35 36 53 54 55 56 68 68 69 70 71 72 73
statement_part       : 3 38
statement_sequence   : 34 35
type                 : 8 21 22 23 26 32
variable_declaration : 6 7
variable_declaration_list : 4 6
variable_declaration_part : 3
while_statement      : 40
writeln_statement    : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header SEMICOLON block DOT
    (2) header -> . PROGRAM ID

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 3

    (2) header -> PROGRAM . ID

    ID              shift and go to state 5


state 4

    (1) program -> header SEMICOLON . block DOT
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 6
    variable_declaration_part      shift and go to state 7

state 5

    (2) header -> PROGRAM ID .

    SEMICOLON       reduce using rule 2 (header -> PROGRAM ID .)


state 6

    (1) program -> header SEMICOLON block . DOT

    DOT             shift and go to state 9


state 7

    (3) block -> variable_declaration_part . procedure_or_function statement_part
    (13) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (14) procedure_or_function -> .
    (15) proc_or_func_declaration -> . procedure_declaration
    (16) proc_or_func_declaration -> . function_declaration
    (17) procedure_declaration -> . procedure_heading SEMICOLON block
    (20) function_declaration -> . function_heading SEMICOLON block
    (18) procedure_heading -> . PROCEDURE ID
    (19) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (21) function_heading -> . FUNCTION type
    (22) function_heading -> . FUNCTION ID COLON type
    (23) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

    BEGIN           reduce using rule 14 (procedure_or_function -> .)
    PROCEDURE       shift and go to state 16
    FUNCTION        shift and go to state 17

    procedure_or_function          shift and go to state 10
    proc_or_func_declaration       shift and go to state 11
    procedure_declaration          shift and go to state 12
    function_declaration           shift and go to state 13
    procedure_heading              shift and go to state 14
    function_heading               shift and go to state 15

state 8

    (4) variable_declaration_part -> VAR . variable_declaration_list
    (6) variable_declaration_list -> . variable_declaration_list variable_declaration
    (7) variable_declaration_list -> . variable_declaration
    (8) variable_declaration -> . id_list COLON type SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID LBRACKET expression RBRACKET
    (11) id_list -> . ID COMMA id_list
    (12) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 21

    variable_declaration_list      shift and go to state 18
    variable_declaration           shift and go to state 19
    id_list                        shift and go to state 20

state 9

    (1) program -> header SEMICOLON block DOT .

    $end            reduce using rule 1 (program -> header SEMICOLON block DOT .)


state 10

    (3) block -> variable_declaration_part procedure_or_function . statement_part
    (34) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 23

    statement_part                 shift and go to state 22

state 11

    (13) procedure_or_function -> proc_or_func_declaration . SEMICOLON procedure_or_function

    SEMICOLON       shift and go to state 24


state 12

    (15) proc_or_func_declaration -> procedure_declaration .

    SEMICOLON       reduce using rule 15 (proc_or_func_declaration -> procedure_declaration .)


state 13

    (16) proc_or_func_declaration -> function_declaration .

    SEMICOLON       reduce using rule 16 (proc_or_func_declaration -> function_declaration .)


state 14

    (17) procedure_declaration -> procedure_heading . SEMICOLON block

    SEMICOLON       shift and go to state 25


state 15

    (20) function_declaration -> function_heading . SEMICOLON block

    SEMICOLON       shift and go to state 26


state 16

    (18) procedure_heading -> PROCEDURE . ID
    (19) procedure_heading -> PROCEDURE . ID LPAREN parameter_list RPAREN

    ID              shift and go to state 27


state 17

    (21) function_heading -> FUNCTION . type
    (22) function_heading -> FUNCTION . ID COLON type
    (23) function_heading -> FUNCTION . ID LPAREN parameter_list RPAREN COLON type
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    ID              shift and go to state 29
    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 28
    array_type                     shift and go to state 34

state 18

    (4) variable_declaration_part -> VAR variable_declaration_list .
    (6) variable_declaration_list -> variable_declaration_list . variable_declaration
    (8) variable_declaration -> . id_list COLON type SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID LBRACKET expression RBRACKET
    (11) id_list -> . ID COMMA id_list
    (12) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)
    FUNCTION        reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration_list .)
    ID              shift and go to state 21

    variable_declaration           shift and go to state 36
    id_list                        shift and go to state 20

state 19

    (7) variable_declaration_list -> variable_declaration .

    ID              reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    PROCEDURE       reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    FUNCTION        reduce using rule 7 (variable_declaration_list -> variable_declaration .)
    BEGIN           reduce using rule 7 (variable_declaration_list -> variable_declaration .)


state 20

    (8) variable_declaration -> id_list . COLON type SEMICOLON

    COLON           shift and go to state 37


state 21

    (9) id_list -> ID .
    (10) id_list -> ID . LBRACKET expression RBRACKET
    (11) id_list -> ID . COMMA id_list
    (12) id_list -> ID . LBRACKET expression RBRACKET COMMA id_list

    COLON           reduce using rule 9 (id_list -> ID .)
    RPAREN          reduce using rule 9 (id_list -> ID .)
    LBRACKET        shift and go to state 38
    COMMA           shift and go to state 39


state 22

    (3) block -> variable_declaration_part procedure_or_function statement_part .

    DOT             reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)
    SEMICOLON       reduce using rule 3 (block -> variable_declaration_part procedure_or_function statement_part .)


state 23

    (34) statement_part -> BEGIN . statement_sequence END
    (35) statement_sequence -> . statement SEMICOLON statement_sequence
    (36) statement_sequence -> . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement_sequence             shift and go to state 40
    statement                      shift and go to state 41
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 24

    (13) procedure_or_function -> proc_or_func_declaration SEMICOLON . procedure_or_function
    (13) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (14) procedure_or_function -> .
    (15) proc_or_func_declaration -> . procedure_declaration
    (16) proc_or_func_declaration -> . function_declaration
    (17) procedure_declaration -> . procedure_heading SEMICOLON block
    (20) function_declaration -> . function_heading SEMICOLON block
    (18) procedure_heading -> . PROCEDURE ID
    (19) procedure_heading -> . PROCEDURE ID LPAREN parameter_list RPAREN
    (21) function_heading -> . FUNCTION type
    (22) function_heading -> . FUNCTION ID COLON type
    (23) function_heading -> . FUNCTION ID LPAREN parameter_list RPAREN COLON type

    BEGIN           reduce using rule 14 (procedure_or_function -> .)
    PROCEDURE       shift and go to state 16
    FUNCTION        shift and go to state 17

    proc_or_func_declaration       shift and go to state 11
    procedure_or_function          shift and go to state 64
    procedure_declaration          shift and go to state 12
    function_declaration           shift and go to state 13
    procedure_heading              shift and go to state 14
    function_heading               shift and go to state 15

state 25

    (17) procedure_declaration -> procedure_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 65
    variable_declaration_part      shift and go to state 7

state 26

    (20) function_declaration -> function_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function statement_part
    (4) variable_declaration_part -> . VAR variable_declaration_list
    (5) variable_declaration_part -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 5 (variable_declaration_part -> .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> .)

    block                          shift and go to state 66
    variable_declaration_part      shift and go to state 7

state 27

    (18) procedure_heading -> PROCEDURE ID .
    (19) procedure_heading -> PROCEDURE ID . LPAREN parameter_list RPAREN

    SEMICOLON       reduce using rule 18 (procedure_heading -> PROCEDURE ID .)
    LPAREN          shift and go to state 67


state 28

    (21) function_heading -> FUNCTION type .

    SEMICOLON       reduce using rule 21 (function_heading -> FUNCTION type .)


state 29

    (22) function_heading -> FUNCTION ID . COLON type
    (23) function_heading -> FUNCTION ID . LPAREN parameter_list RPAREN COLON type

    COLON           shift and go to state 68
    LPAREN          shift and go to state 69


state 30

    (27) type -> REAL .

    SEMICOLON       reduce using rule 27 (type -> REAL .)
    COMMA           reduce using rule 27 (type -> REAL .)
    RPAREN          reduce using rule 27 (type -> REAL .)


state 31

    (28) type -> INTEGER .

    SEMICOLON       reduce using rule 28 (type -> INTEGER .)
    COMMA           reduce using rule 28 (type -> INTEGER .)
    RPAREN          reduce using rule 28 (type -> INTEGER .)


state 32

    (29) type -> BOOLEAN .

    SEMICOLON       reduce using rule 29 (type -> BOOLEAN .)
    COMMA           reduce using rule 29 (type -> BOOLEAN .)
    RPAREN          reduce using rule 29 (type -> BOOLEAN .)


state 33

    (30) type -> STRING .

    SEMICOLON       reduce using rule 30 (type -> STRING .)
    COMMA           reduce using rule 30 (type -> STRING .)
    RPAREN          reduce using rule 30 (type -> STRING .)


state 34

    (31) type -> array_type .

    SEMICOLON       reduce using rule 31 (type -> array_type .)
    COMMA           reduce using rule 31 (type -> array_type .)
    RPAREN          reduce using rule 31 (type -> array_type .)


state 35

    (32) array_type -> ARRAY . LBRACKET range RBRACKET OF type

    LBRACKET        shift and go to state 70


state 36

    (6) variable_declaration_list -> variable_declaration_list variable_declaration .

    ID              reduce using rule 6 (variable_declaration_list -> variable_declaration_list variable_declaration .)
    PROCEDURE       reduce using rule 6 (variable_declaration_list -> variable_declaration_list variable_declaration .)
    FUNCTION        reduce using rule 6 (variable_declaration_list -> variable_declaration_list variable_declaration .)
    BEGIN           reduce using rule 6 (variable_declaration_list -> variable_declaration_list variable_declaration .)


state 37

    (8) variable_declaration -> id_list COLON . type SEMICOLON
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 71
    array_type                     shift and go to state 34

state 38

    (10) id_list -> ID LBRACKET . expression RBRACKET
    (12) id_list -> ID LBRACKET . expression RBRACKET COMMA id_list
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 73
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 39

    (11) id_list -> ID COMMA . id_list
    (9) id_list -> . ID
    (10) id_list -> . ID LBRACKET expression RBRACKET
    (11) id_list -> . ID COMMA id_list
    (12) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 21

    id_list                        shift and go to state 84

state 40

    (34) statement_part -> BEGIN statement_sequence . END

    END             shift and go to state 85


state 41

    (35) statement_sequence -> statement . SEMICOLON statement_sequence
    (36) statement_sequence -> statement .

    SEMICOLON       shift and go to state 86
    END             reduce using rule 36 (statement_sequence -> statement .)


state 42

    (37) statement -> assignment_statement .

    SEMICOLON       reduce using rule 37 (statement -> assignment_statement .)
    END             reduce using rule 37 (statement -> assignment_statement .)
    UNTIL           reduce using rule 37 (statement -> assignment_statement .)
    ELSE            reduce using rule 37 (statement -> assignment_statement .)


state 43

    (38) statement -> statement_part .

    SEMICOLON       reduce using rule 38 (statement -> statement_part .)
    END             reduce using rule 38 (statement -> statement_part .)
    UNTIL           reduce using rule 38 (statement -> statement_part .)
    ELSE            reduce using rule 38 (statement -> statement_part .)


state 44

    (39) statement -> if_statement .

    SEMICOLON       reduce using rule 39 (statement -> if_statement .)
    END             reduce using rule 39 (statement -> if_statement .)
    UNTIL           reduce using rule 39 (statement -> if_statement .)
    ELSE            reduce using rule 39 (statement -> if_statement .)


state 45

    (40) statement -> while_statement .

    SEMICOLON       reduce using rule 40 (statement -> while_statement .)
    END             reduce using rule 40 (statement -> while_statement .)
    UNTIL           reduce using rule 40 (statement -> while_statement .)
    ELSE            reduce using rule 40 (statement -> while_statement .)


state 46

    (41) statement -> repeat_statement .

    SEMICOLON       reduce using rule 41 (statement -> repeat_statement .)
    END             reduce using rule 41 (statement -> repeat_statement .)
    UNTIL           reduce using rule 41 (statement -> repeat_statement .)
    ELSE            reduce using rule 41 (statement -> repeat_statement .)


state 47

    (42) statement -> for_statement .

    SEMICOLON       reduce using rule 42 (statement -> for_statement .)
    END             reduce using rule 42 (statement -> for_statement .)
    UNTIL           reduce using rule 42 (statement -> for_statement .)
    ELSE            reduce using rule 42 (statement -> for_statement .)


state 48

    (43) statement -> procedure_or_function_call .

    SEMICOLON       reduce using rule 43 (statement -> procedure_or_function_call .)
    END             reduce using rule 43 (statement -> procedure_or_function_call .)
    UNTIL           reduce using rule 43 (statement -> procedure_or_function_call .)
    ELSE            reduce using rule 43 (statement -> procedure_or_function_call .)


state 49

    (44) statement -> writeln_statement .

    SEMICOLON       reduce using rule 44 (statement -> writeln_statement .)
    END             reduce using rule 44 (statement -> writeln_statement .)
    UNTIL           reduce using rule 44 (statement -> writeln_statement .)
    ELSE            reduce using rule 44 (statement -> writeln_statement .)


state 50

    (45) statement -> readln_statement .

    SEMICOLON       reduce using rule 45 (statement -> readln_statement .)
    END             reduce using rule 45 (statement -> readln_statement .)
    UNTIL           reduce using rule 45 (statement -> readln_statement .)
    ELSE            reduce using rule 45 (statement -> readln_statement .)


state 51

    (46) statement -> break_statement .

    SEMICOLON       reduce using rule 46 (statement -> break_statement .)
    END             reduce using rule 46 (statement -> break_statement .)
    UNTIL           reduce using rule 46 (statement -> break_statement .)
    ELSE            reduce using rule 46 (statement -> break_statement .)


state 52

    (47) statement -> continue_statement .

    SEMICOLON       reduce using rule 47 (statement -> continue_statement .)
    END             reduce using rule 47 (statement -> continue_statement .)
    UNTIL           reduce using rule 47 (statement -> continue_statement .)
    ELSE            reduce using rule 47 (statement -> continue_statement .)


state 53

    (48) statement -> case_statement .

    SEMICOLON       reduce using rule 48 (statement -> case_statement .)
    END             reduce using rule 48 (statement -> case_statement .)
    UNTIL           reduce using rule 48 (statement -> case_statement .)
    ELSE            reduce using rule 48 (statement -> case_statement .)


state 54

    (74) assignment_statement -> ID . ASSIGN expression
    (63) procedure_or_function_call -> ID . LPAREN param_list RPAREN
    (64) procedure_or_function_call -> ID .

    ASSIGN          shift and go to state 87
    LPAREN          shift and go to state 88
    SEMICOLON       reduce using rule 64 (procedure_or_function_call -> ID .)
    END             reduce using rule 64 (procedure_or_function_call -> ID .)
    UNTIL           reduce using rule 64 (procedure_or_function_call -> ID .)
    ELSE            reduce using rule 64 (procedure_or_function_call -> ID .)


state 55

    (68) if_statement -> IF . expression THEN statement ELSE statement
    (69) if_statement -> IF . expression THEN statement
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 89
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 56

    (70) while_statement -> WHILE . expression DO statement
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 90
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 57

    (71) repeat_statement -> REPEAT . statement UNTIL expression
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 91
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 58

    (72) for_statement -> FOR . assignment_statement TO expression DO statement
    (73) for_statement -> FOR . assignment_statement DOWNTO expression DO statement
    (74) assignment_statement -> . ID ASSIGN expression

    ID              shift and go to state 93

    assignment_statement           shift and go to state 92

state 59

    (57) writeln_statement -> WRITELN . LPAREN param_list RPAREN
    (58) writeln_statement -> WRITELN . LPAREN RPAREN

    LPAREN          shift and go to state 94


state 60

    (59) readln_statement -> READLN . LPAREN id_list RPAREN
    (60) readln_statement -> READLN . LPAREN RPAREN

    LPAREN          shift and go to state 95


state 61

    (61) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 96


state 62

    (62) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 97


state 63

    (50) case_statement -> CASE . expression OF case_list END
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 98
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 64

    (13) procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .

    BEGIN           reduce using rule 13 (procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .)


state 65

    (17) procedure_declaration -> procedure_heading SEMICOLON block .

    SEMICOLON       reduce using rule 17 (procedure_declaration -> procedure_heading SEMICOLON block .)


state 66

    (20) function_declaration -> function_heading SEMICOLON block .

    SEMICOLON       reduce using rule 20 (function_declaration -> function_heading SEMICOLON block .)


state 67

    (19) procedure_heading -> PROCEDURE ID LPAREN . parameter_list RPAREN
    (24) parameter_list -> . parameter COMMA parameter_list
    (25) parameter_list -> . parameter
    (26) parameter -> . ID COLON type

    ID              shift and go to state 99

    parameter_list                 shift and go to state 100
    parameter                      shift and go to state 101

state 68

    (22) function_heading -> FUNCTION ID COLON . type
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 102
    array_type                     shift and go to state 34

state 69

    (23) function_heading -> FUNCTION ID LPAREN . parameter_list RPAREN COLON type
    (24) parameter_list -> . parameter COMMA parameter_list
    (25) parameter_list -> . parameter
    (26) parameter -> . ID COLON type

    ID              shift and go to state 99

    parameter_list                 shift and go to state 103
    parameter                      shift and go to state 101

state 70

    (32) array_type -> ARRAY LBRACKET . range RBRACKET OF type
    (33) range -> . expression RANGE expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    range                          shift and go to state 104
    expression                     shift and go to state 105
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 71

    (8) variable_declaration -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 106


state 72

    (96) element -> ID .
    (103) element -> ID . LBRACKET expression RBRACKET

    TIMES           reduce using rule 96 (element -> ID .)
    DIVIDE          reduce using rule 96 (element -> ID .)
    PLUS            reduce using rule 96 (element -> ID .)
    MINUS           reduce using rule 96 (element -> ID .)
    DIV             reduce using rule 96 (element -> ID .)
    MOD             reduce using rule 96 (element -> ID .)
    EQUALS          reduce using rule 96 (element -> ID .)
    DIFFERENT       reduce using rule 96 (element -> ID .)
    LESSTHAN        reduce using rule 96 (element -> ID .)
    LESSEQUAL       reduce using rule 96 (element -> ID .)
    GREATERTHAN     reduce using rule 96 (element -> ID .)
    GREATEREQUAL    reduce using rule 96 (element -> ID .)
    RBRACKET        reduce using rule 96 (element -> ID .)
    AND             reduce using rule 96 (element -> ID .)
    OR              reduce using rule 96 (element -> ID .)
    THEN            reduce using rule 96 (element -> ID .)
    DO              reduce using rule 96 (element -> ID .)
    OF              reduce using rule 96 (element -> ID .)
    RANGE           reduce using rule 96 (element -> ID .)
    RPAREN          reduce using rule 96 (element -> ID .)
    SEMICOLON       reduce using rule 96 (element -> ID .)
    END             reduce using rule 96 (element -> ID .)
    UNTIL           reduce using rule 96 (element -> ID .)
    TO              reduce using rule 96 (element -> ID .)
    DOWNTO          reduce using rule 96 (element -> ID .)
    ELSE            reduce using rule 96 (element -> ID .)
    COMMA           reduce using rule 96 (element -> ID .)
    LBRACKET        shift and go to state 107


state 73

    (10) id_list -> ID LBRACKET expression . RBRACKET
    (12) id_list -> ID LBRACKET expression . RBRACKET COMMA id_list
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RBRACKET        shift and go to state 108
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 74

    (76) expression -> expression_m .
    (78) expression_m -> expression_m . sign expression_s
    (85) sign -> . PLUS
    (86) sign -> . MINUS
    (87) sign -> . DIV
    (88) sign -> . MOD
    (89) sign -> . EQUALS
    (90) sign -> . DIFFERENT
    (91) sign -> . LESSTHAN
    (92) sign -> . LESSEQUAL
    (93) sign -> . GREATERTHAN
    (94) sign -> . GREATEREQUAL

    RBRACKET        reduce using rule 76 (expression -> expression_m .)
    AND             reduce using rule 76 (expression -> expression_m .)
    OR              reduce using rule 76 (expression -> expression_m .)
    THEN            reduce using rule 76 (expression -> expression_m .)
    DO              reduce using rule 76 (expression -> expression_m .)
    OF              reduce using rule 76 (expression -> expression_m .)
    RANGE           reduce using rule 76 (expression -> expression_m .)
    RPAREN          reduce using rule 76 (expression -> expression_m .)
    SEMICOLON       reduce using rule 76 (expression -> expression_m .)
    END             reduce using rule 76 (expression -> expression_m .)
    UNTIL           reduce using rule 76 (expression -> expression_m .)
    TO              reduce using rule 76 (expression -> expression_m .)
    DOWNTO          reduce using rule 76 (expression -> expression_m .)
    ELSE            reduce using rule 76 (expression -> expression_m .)
    COMMA           reduce using rule 76 (expression -> expression_m .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    DIV             shift and go to state 115
    MOD             shift and go to state 116
    EQUALS          shift and go to state 117
    DIFFERENT       shift and go to state 118
    LESSTHAN        shift and go to state 119
    LESSEQUAL       shift and go to state 120
    GREATERTHAN     shift and go to state 121
    GREATEREQUAL    shift and go to state 122

    sign                           shift and go to state 112

state 75

    (77) expression_m -> expression_s .
    (80) expression_s -> expression_s . psign element
    (83) psign -> . TIMES
    (84) psign -> . DIVIDE

    PLUS            reduce using rule 77 (expression_m -> expression_s .)
    MINUS           reduce using rule 77 (expression_m -> expression_s .)
    DIV             reduce using rule 77 (expression_m -> expression_s .)
    MOD             reduce using rule 77 (expression_m -> expression_s .)
    EQUALS          reduce using rule 77 (expression_m -> expression_s .)
    DIFFERENT       reduce using rule 77 (expression_m -> expression_s .)
    LESSTHAN        reduce using rule 77 (expression_m -> expression_s .)
    LESSEQUAL       reduce using rule 77 (expression_m -> expression_s .)
    GREATERTHAN     reduce using rule 77 (expression_m -> expression_s .)
    GREATEREQUAL    reduce using rule 77 (expression_m -> expression_s .)
    RBRACKET        reduce using rule 77 (expression_m -> expression_s .)
    AND             reduce using rule 77 (expression_m -> expression_s .)
    OR              reduce using rule 77 (expression_m -> expression_s .)
    THEN            reduce using rule 77 (expression_m -> expression_s .)
    DO              reduce using rule 77 (expression_m -> expression_s .)
    OF              reduce using rule 77 (expression_m -> expression_s .)
    RANGE           reduce using rule 77 (expression_m -> expression_s .)
    RPAREN          reduce using rule 77 (expression_m -> expression_s .)
    SEMICOLON       reduce using rule 77 (expression_m -> expression_s .)
    END             reduce using rule 77 (expression_m -> expression_s .)
    UNTIL           reduce using rule 77 (expression_m -> expression_s .)
    TO              reduce using rule 77 (expression_m -> expression_s .)
    DOWNTO          reduce using rule 77 (expression_m -> expression_s .)
    ELSE            reduce using rule 77 (expression_m -> expression_s .)
    COMMA           reduce using rule 77 (expression_m -> expression_s .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125

    psign                          shift and go to state 123

state 76

    (79) expression_s -> element .

    TIMES           reduce using rule 79 (expression_s -> element .)
    DIVIDE          reduce using rule 79 (expression_s -> element .)
    PLUS            reduce using rule 79 (expression_s -> element .)
    MINUS           reduce using rule 79 (expression_s -> element .)
    DIV             reduce using rule 79 (expression_s -> element .)
    MOD             reduce using rule 79 (expression_s -> element .)
    EQUALS          reduce using rule 79 (expression_s -> element .)
    DIFFERENT       reduce using rule 79 (expression_s -> element .)
    LESSTHAN        reduce using rule 79 (expression_s -> element .)
    LESSEQUAL       reduce using rule 79 (expression_s -> element .)
    GREATERTHAN     reduce using rule 79 (expression_s -> element .)
    GREATEREQUAL    reduce using rule 79 (expression_s -> element .)
    RBRACKET        reduce using rule 79 (expression_s -> element .)
    AND             reduce using rule 79 (expression_s -> element .)
    OR              reduce using rule 79 (expression_s -> element .)
    THEN            reduce using rule 79 (expression_s -> element .)
    DO              reduce using rule 79 (expression_s -> element .)
    OF              reduce using rule 79 (expression_s -> element .)
    RANGE           reduce using rule 79 (expression_s -> element .)
    RPAREN          reduce using rule 79 (expression_s -> element .)
    SEMICOLON       reduce using rule 79 (expression_s -> element .)
    END             reduce using rule 79 (expression_s -> element .)
    UNTIL           reduce using rule 79 (expression_s -> element .)
    TO              reduce using rule 79 (expression_s -> element .)
    DOWNTO          reduce using rule 79 (expression_s -> element .)
    ELSE            reduce using rule 79 (expression_s -> element .)
    COMMA           reduce using rule 79 (expression_s -> element .)


state 77

    (97) element -> NUMBER .

    TIMES           reduce using rule 97 (element -> NUMBER .)
    DIVIDE          reduce using rule 97 (element -> NUMBER .)
    PLUS            reduce using rule 97 (element -> NUMBER .)
    MINUS           reduce using rule 97 (element -> NUMBER .)
    DIV             reduce using rule 97 (element -> NUMBER .)
    MOD             reduce using rule 97 (element -> NUMBER .)
    EQUALS          reduce using rule 97 (element -> NUMBER .)
    DIFFERENT       reduce using rule 97 (element -> NUMBER .)
    LESSTHAN        reduce using rule 97 (element -> NUMBER .)
    LESSEQUAL       reduce using rule 97 (element -> NUMBER .)
    GREATERTHAN     reduce using rule 97 (element -> NUMBER .)
    GREATEREQUAL    reduce using rule 97 (element -> NUMBER .)
    RBRACKET        reduce using rule 97 (element -> NUMBER .)
    AND             reduce using rule 97 (element -> NUMBER .)
    OR              reduce using rule 97 (element -> NUMBER .)
    THEN            reduce using rule 97 (element -> NUMBER .)
    DO              reduce using rule 97 (element -> NUMBER .)
    OF              reduce using rule 97 (element -> NUMBER .)
    RANGE           reduce using rule 97 (element -> NUMBER .)
    RPAREN          reduce using rule 97 (element -> NUMBER .)
    SEMICOLON       reduce using rule 97 (element -> NUMBER .)
    END             reduce using rule 97 (element -> NUMBER .)
    UNTIL           reduce using rule 97 (element -> NUMBER .)
    TO              reduce using rule 97 (element -> NUMBER .)
    DOWNTO          reduce using rule 97 (element -> NUMBER .)
    ELSE            reduce using rule 97 (element -> NUMBER .)
    COMMA           reduce using rule 97 (element -> NUMBER .)


state 78

    (98) element -> BOOL .

    TIMES           reduce using rule 98 (element -> BOOL .)
    DIVIDE          reduce using rule 98 (element -> BOOL .)
    PLUS            reduce using rule 98 (element -> BOOL .)
    MINUS           reduce using rule 98 (element -> BOOL .)
    DIV             reduce using rule 98 (element -> BOOL .)
    MOD             reduce using rule 98 (element -> BOOL .)
    EQUALS          reduce using rule 98 (element -> BOOL .)
    DIFFERENT       reduce using rule 98 (element -> BOOL .)
    LESSTHAN        reduce using rule 98 (element -> BOOL .)
    LESSEQUAL       reduce using rule 98 (element -> BOOL .)
    GREATERTHAN     reduce using rule 98 (element -> BOOL .)
    GREATEREQUAL    reduce using rule 98 (element -> BOOL .)
    RBRACKET        reduce using rule 98 (element -> BOOL .)
    AND             reduce using rule 98 (element -> BOOL .)
    OR              reduce using rule 98 (element -> BOOL .)
    THEN            reduce using rule 98 (element -> BOOL .)
    DO              reduce using rule 98 (element -> BOOL .)
    OF              reduce using rule 98 (element -> BOOL .)
    RANGE           reduce using rule 98 (element -> BOOL .)
    RPAREN          reduce using rule 98 (element -> BOOL .)
    SEMICOLON       reduce using rule 98 (element -> BOOL .)
    END             reduce using rule 98 (element -> BOOL .)
    UNTIL           reduce using rule 98 (element -> BOOL .)
    TO              reduce using rule 98 (element -> BOOL .)
    DOWNTO          reduce using rule 98 (element -> BOOL .)
    ELSE            reduce using rule 98 (element -> BOOL .)
    COMMA           reduce using rule 98 (element -> BOOL .)


state 79

    (99) element -> PHRASE .

    TIMES           reduce using rule 99 (element -> PHRASE .)
    DIVIDE          reduce using rule 99 (element -> PHRASE .)
    PLUS            reduce using rule 99 (element -> PHRASE .)
    MINUS           reduce using rule 99 (element -> PHRASE .)
    DIV             reduce using rule 99 (element -> PHRASE .)
    MOD             reduce using rule 99 (element -> PHRASE .)
    EQUALS          reduce using rule 99 (element -> PHRASE .)
    DIFFERENT       reduce using rule 99 (element -> PHRASE .)
    LESSTHAN        reduce using rule 99 (element -> PHRASE .)
    LESSEQUAL       reduce using rule 99 (element -> PHRASE .)
    GREATERTHAN     reduce using rule 99 (element -> PHRASE .)
    GREATEREQUAL    reduce using rule 99 (element -> PHRASE .)
    RBRACKET        reduce using rule 99 (element -> PHRASE .)
    AND             reduce using rule 99 (element -> PHRASE .)
    OR              reduce using rule 99 (element -> PHRASE .)
    THEN            reduce using rule 99 (element -> PHRASE .)
    DO              reduce using rule 99 (element -> PHRASE .)
    OF              reduce using rule 99 (element -> PHRASE .)
    RANGE           reduce using rule 99 (element -> PHRASE .)
    RPAREN          reduce using rule 99 (element -> PHRASE .)
    SEMICOLON       reduce using rule 99 (element -> PHRASE .)
    END             reduce using rule 99 (element -> PHRASE .)
    UNTIL           reduce using rule 99 (element -> PHRASE .)
    TO              reduce using rule 99 (element -> PHRASE .)
    DOWNTO          reduce using rule 99 (element -> PHRASE .)
    ELSE            reduce using rule 99 (element -> PHRASE .)
    COMMA           reduce using rule 99 (element -> PHRASE .)


state 80

    (100) element -> LPAREN . expression RPAREN
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 126
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 81

    (101) element -> NOT . element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    element                        shift and go to state 127
    length_function                shift and go to state 82

state 82

    (102) element -> length_function .

    TIMES           reduce using rule 102 (element -> length_function .)
    DIVIDE          reduce using rule 102 (element -> length_function .)
    PLUS            reduce using rule 102 (element -> length_function .)
    MINUS           reduce using rule 102 (element -> length_function .)
    DIV             reduce using rule 102 (element -> length_function .)
    MOD             reduce using rule 102 (element -> length_function .)
    EQUALS          reduce using rule 102 (element -> length_function .)
    DIFFERENT       reduce using rule 102 (element -> length_function .)
    LESSTHAN        reduce using rule 102 (element -> length_function .)
    LESSEQUAL       reduce using rule 102 (element -> length_function .)
    GREATERTHAN     reduce using rule 102 (element -> length_function .)
    GREATEREQUAL    reduce using rule 102 (element -> length_function .)
    RBRACKET        reduce using rule 102 (element -> length_function .)
    AND             reduce using rule 102 (element -> length_function .)
    OR              reduce using rule 102 (element -> length_function .)
    THEN            reduce using rule 102 (element -> length_function .)
    DO              reduce using rule 102 (element -> length_function .)
    OF              reduce using rule 102 (element -> length_function .)
    RANGE           reduce using rule 102 (element -> length_function .)
    RPAREN          reduce using rule 102 (element -> length_function .)
    SEMICOLON       reduce using rule 102 (element -> length_function .)
    END             reduce using rule 102 (element -> length_function .)
    UNTIL           reduce using rule 102 (element -> length_function .)
    TO              reduce using rule 102 (element -> length_function .)
    DOWNTO          reduce using rule 102 (element -> length_function .)
    ELSE            reduce using rule 102 (element -> length_function .)
    COMMA           reduce using rule 102 (element -> length_function .)


state 83

    (95) length_function -> LENGTH . LPAREN expression RPAREN

    LPAREN          shift and go to state 128


state 84

    (11) id_list -> ID COMMA id_list .

    COLON           reduce using rule 11 (id_list -> ID COMMA id_list .)
    RPAREN          reduce using rule 11 (id_list -> ID COMMA id_list .)


state 85

    (34) statement_part -> BEGIN statement_sequence END .

    DOT             reduce using rule 34 (statement_part -> BEGIN statement_sequence END .)
    SEMICOLON       reduce using rule 34 (statement_part -> BEGIN statement_sequence END .)
    END             reduce using rule 34 (statement_part -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 34 (statement_part -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 34 (statement_part -> BEGIN statement_sequence END .)


state 86

    (35) statement_sequence -> statement SEMICOLON . statement_sequence
    (35) statement_sequence -> . statement SEMICOLON statement_sequence
    (36) statement_sequence -> . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 41
    statement_sequence             shift and go to state 129
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 87

    (74) assignment_statement -> ID ASSIGN . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 130
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 88

    (63) procedure_or_function_call -> ID LPAREN . param_list RPAREN
    (65) param_list -> . param_list COMMA param
    (66) param_list -> . param
    (67) param -> . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    param_list                     shift and go to state 131
    param                          shift and go to state 132
    expression                     shift and go to state 133
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 89

    (68) if_statement -> IF expression . THEN statement ELSE statement
    (69) if_statement -> IF expression . THEN statement
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    THEN            shift and go to state 134
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 90

    (70) while_statement -> WHILE expression . DO statement
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    DO              shift and go to state 135
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 91

    (71) repeat_statement -> REPEAT statement . UNTIL expression

    UNTIL           shift and go to state 136


state 92

    (72) for_statement -> FOR assignment_statement . TO expression DO statement
    (73) for_statement -> FOR assignment_statement . DOWNTO expression DO statement

    TO              shift and go to state 137
    DOWNTO          shift and go to state 138


state 93

    (74) assignment_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 87


state 94

    (57) writeln_statement -> WRITELN LPAREN . param_list RPAREN
    (58) writeln_statement -> WRITELN LPAREN . RPAREN
    (65) param_list -> . param_list COMMA param
    (66) param_list -> . param
    (67) param -> . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    RPAREN          shift and go to state 140
    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    param_list                     shift and go to state 139
    param                          shift and go to state 132
    expression                     shift and go to state 133
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 95

    (59) readln_statement -> READLN LPAREN . id_list RPAREN
    (60) readln_statement -> READLN LPAREN . RPAREN
    (9) id_list -> . ID
    (10) id_list -> . ID LBRACKET expression RBRACKET
    (11) id_list -> . ID COMMA id_list
    (12) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    RPAREN          shift and go to state 142
    ID              shift and go to state 21

    id_list                        shift and go to state 141

state 96

    (61) break_statement -> BREAK SEMICOLON .

    SEMICOLON       reduce using rule 61 (break_statement -> BREAK SEMICOLON .)
    END             reduce using rule 61 (break_statement -> BREAK SEMICOLON .)
    UNTIL           reduce using rule 61 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 61 (break_statement -> BREAK SEMICOLON .)


state 97

    (62) continue_statement -> CONTINUE SEMICOLON .

    SEMICOLON       reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    END             reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    UNTIL           reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)


state 98

    (50) case_statement -> CASE expression . OF case_list END
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    OF              shift and go to state 143
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 99

    (26) parameter -> ID . COLON type

    COLON           shift and go to state 144


state 100

    (19) procedure_heading -> PROCEDURE ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 145


state 101

    (24) parameter_list -> parameter . COMMA parameter_list
    (25) parameter_list -> parameter .

    COMMA           shift and go to state 146
    RPAREN          reduce using rule 25 (parameter_list -> parameter .)


state 102

    (22) function_heading -> FUNCTION ID COLON type .

    SEMICOLON       reduce using rule 22 (function_heading -> FUNCTION ID COLON type .)


state 103

    (23) function_heading -> FUNCTION ID LPAREN parameter_list . RPAREN COLON type

    RPAREN          shift and go to state 147


state 104

    (32) array_type -> ARRAY LBRACKET range . RBRACKET OF type

    RBRACKET        shift and go to state 148


state 105

    (33) range -> expression . RANGE expression
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RANGE           shift and go to state 149
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 106

    (8) variable_declaration -> id_list COLON type SEMICOLON .

    ID              reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    FUNCTION        reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 8 (variable_declaration -> id_list COLON type SEMICOLON .)


state 107

    (103) element -> ID LBRACKET . expression RBRACKET
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 150
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 108

    (10) id_list -> ID LBRACKET expression RBRACKET .
    (12) id_list -> ID LBRACKET expression RBRACKET . COMMA id_list

    COLON           reduce using rule 10 (id_list -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 10 (id_list -> ID LBRACKET expression RBRACKET .)
    COMMA           shift and go to state 151


state 109

    (75) expression -> expression and_or . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression_m                   shift and go to state 152
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 110

    (81) and_or -> AND .

    ID              reduce using rule 81 (and_or -> AND .)
    NUMBER          reduce using rule 81 (and_or -> AND .)
    BOOL            reduce using rule 81 (and_or -> AND .)
    PHRASE          reduce using rule 81 (and_or -> AND .)
    LPAREN          reduce using rule 81 (and_or -> AND .)
    NOT             reduce using rule 81 (and_or -> AND .)
    LENGTH          reduce using rule 81 (and_or -> AND .)


state 111

    (82) and_or -> OR .

    ID              reduce using rule 82 (and_or -> OR .)
    NUMBER          reduce using rule 82 (and_or -> OR .)
    BOOL            reduce using rule 82 (and_or -> OR .)
    PHRASE          reduce using rule 82 (and_or -> OR .)
    LPAREN          reduce using rule 82 (and_or -> OR .)
    NOT             reduce using rule 82 (and_or -> OR .)
    LENGTH          reduce using rule 82 (and_or -> OR .)


state 112

    (78) expression_m -> expression_m sign . expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression_s                   shift and go to state 153
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 113

    (85) sign -> PLUS .

    ID              reduce using rule 85 (sign -> PLUS .)
    NUMBER          reduce using rule 85 (sign -> PLUS .)
    BOOL            reduce using rule 85 (sign -> PLUS .)
    PHRASE          reduce using rule 85 (sign -> PLUS .)
    LPAREN          reduce using rule 85 (sign -> PLUS .)
    NOT             reduce using rule 85 (sign -> PLUS .)
    LENGTH          reduce using rule 85 (sign -> PLUS .)


state 114

    (86) sign -> MINUS .

    ID              reduce using rule 86 (sign -> MINUS .)
    NUMBER          reduce using rule 86 (sign -> MINUS .)
    BOOL            reduce using rule 86 (sign -> MINUS .)
    PHRASE          reduce using rule 86 (sign -> MINUS .)
    LPAREN          reduce using rule 86 (sign -> MINUS .)
    NOT             reduce using rule 86 (sign -> MINUS .)
    LENGTH          reduce using rule 86 (sign -> MINUS .)


state 115

    (87) sign -> DIV .

    ID              reduce using rule 87 (sign -> DIV .)
    NUMBER          reduce using rule 87 (sign -> DIV .)
    BOOL            reduce using rule 87 (sign -> DIV .)
    PHRASE          reduce using rule 87 (sign -> DIV .)
    LPAREN          reduce using rule 87 (sign -> DIV .)
    NOT             reduce using rule 87 (sign -> DIV .)
    LENGTH          reduce using rule 87 (sign -> DIV .)


state 116

    (88) sign -> MOD .

    ID              reduce using rule 88 (sign -> MOD .)
    NUMBER          reduce using rule 88 (sign -> MOD .)
    BOOL            reduce using rule 88 (sign -> MOD .)
    PHRASE          reduce using rule 88 (sign -> MOD .)
    LPAREN          reduce using rule 88 (sign -> MOD .)
    NOT             reduce using rule 88 (sign -> MOD .)
    LENGTH          reduce using rule 88 (sign -> MOD .)


state 117

    (89) sign -> EQUALS .

    ID              reduce using rule 89 (sign -> EQUALS .)
    NUMBER          reduce using rule 89 (sign -> EQUALS .)
    BOOL            reduce using rule 89 (sign -> EQUALS .)
    PHRASE          reduce using rule 89 (sign -> EQUALS .)
    LPAREN          reduce using rule 89 (sign -> EQUALS .)
    NOT             reduce using rule 89 (sign -> EQUALS .)
    LENGTH          reduce using rule 89 (sign -> EQUALS .)


state 118

    (90) sign -> DIFFERENT .

    ID              reduce using rule 90 (sign -> DIFFERENT .)
    NUMBER          reduce using rule 90 (sign -> DIFFERENT .)
    BOOL            reduce using rule 90 (sign -> DIFFERENT .)
    PHRASE          reduce using rule 90 (sign -> DIFFERENT .)
    LPAREN          reduce using rule 90 (sign -> DIFFERENT .)
    NOT             reduce using rule 90 (sign -> DIFFERENT .)
    LENGTH          reduce using rule 90 (sign -> DIFFERENT .)


state 119

    (91) sign -> LESSTHAN .

    ID              reduce using rule 91 (sign -> LESSTHAN .)
    NUMBER          reduce using rule 91 (sign -> LESSTHAN .)
    BOOL            reduce using rule 91 (sign -> LESSTHAN .)
    PHRASE          reduce using rule 91 (sign -> LESSTHAN .)
    LPAREN          reduce using rule 91 (sign -> LESSTHAN .)
    NOT             reduce using rule 91 (sign -> LESSTHAN .)
    LENGTH          reduce using rule 91 (sign -> LESSTHAN .)


state 120

    (92) sign -> LESSEQUAL .

    ID              reduce using rule 92 (sign -> LESSEQUAL .)
    NUMBER          reduce using rule 92 (sign -> LESSEQUAL .)
    BOOL            reduce using rule 92 (sign -> LESSEQUAL .)
    PHRASE          reduce using rule 92 (sign -> LESSEQUAL .)
    LPAREN          reduce using rule 92 (sign -> LESSEQUAL .)
    NOT             reduce using rule 92 (sign -> LESSEQUAL .)
    LENGTH          reduce using rule 92 (sign -> LESSEQUAL .)


state 121

    (93) sign -> GREATERTHAN .

    ID              reduce using rule 93 (sign -> GREATERTHAN .)
    NUMBER          reduce using rule 93 (sign -> GREATERTHAN .)
    BOOL            reduce using rule 93 (sign -> GREATERTHAN .)
    PHRASE          reduce using rule 93 (sign -> GREATERTHAN .)
    LPAREN          reduce using rule 93 (sign -> GREATERTHAN .)
    NOT             reduce using rule 93 (sign -> GREATERTHAN .)
    LENGTH          reduce using rule 93 (sign -> GREATERTHAN .)


state 122

    (94) sign -> GREATEREQUAL .

    ID              reduce using rule 94 (sign -> GREATEREQUAL .)
    NUMBER          reduce using rule 94 (sign -> GREATEREQUAL .)
    BOOL            reduce using rule 94 (sign -> GREATEREQUAL .)
    PHRASE          reduce using rule 94 (sign -> GREATEREQUAL .)
    LPAREN          reduce using rule 94 (sign -> GREATEREQUAL .)
    NOT             reduce using rule 94 (sign -> GREATEREQUAL .)
    LENGTH          reduce using rule 94 (sign -> GREATEREQUAL .)


state 123

    (80) expression_s -> expression_s psign . element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    element                        shift and go to state 154
    length_function                shift and go to state 82

state 124

    (83) psign -> TIMES .

    ID              reduce using rule 83 (psign -> TIMES .)
    NUMBER          reduce using rule 83 (psign -> TIMES .)
    BOOL            reduce using rule 83 (psign -> TIMES .)
    PHRASE          reduce using rule 83 (psign -> TIMES .)
    LPAREN          reduce using rule 83 (psign -> TIMES .)
    NOT             reduce using rule 83 (psign -> TIMES .)
    LENGTH          reduce using rule 83 (psign -> TIMES .)


state 125

    (84) psign -> DIVIDE .

    ID              reduce using rule 84 (psign -> DIVIDE .)
    NUMBER          reduce using rule 84 (psign -> DIVIDE .)
    BOOL            reduce using rule 84 (psign -> DIVIDE .)
    PHRASE          reduce using rule 84 (psign -> DIVIDE .)
    LPAREN          reduce using rule 84 (psign -> DIVIDE .)
    NOT             reduce using rule 84 (psign -> DIVIDE .)
    LENGTH          reduce using rule 84 (psign -> DIVIDE .)


state 126

    (100) element -> LPAREN expression . RPAREN
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RPAREN          shift and go to state 155
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 127

    (101) element -> NOT element .

    TIMES           reduce using rule 101 (element -> NOT element .)
    DIVIDE          reduce using rule 101 (element -> NOT element .)
    PLUS            reduce using rule 101 (element -> NOT element .)
    MINUS           reduce using rule 101 (element -> NOT element .)
    DIV             reduce using rule 101 (element -> NOT element .)
    MOD             reduce using rule 101 (element -> NOT element .)
    EQUALS          reduce using rule 101 (element -> NOT element .)
    DIFFERENT       reduce using rule 101 (element -> NOT element .)
    LESSTHAN        reduce using rule 101 (element -> NOT element .)
    LESSEQUAL       reduce using rule 101 (element -> NOT element .)
    GREATERTHAN     reduce using rule 101 (element -> NOT element .)
    GREATEREQUAL    reduce using rule 101 (element -> NOT element .)
    RBRACKET        reduce using rule 101 (element -> NOT element .)
    AND             reduce using rule 101 (element -> NOT element .)
    OR              reduce using rule 101 (element -> NOT element .)
    THEN            reduce using rule 101 (element -> NOT element .)
    DO              reduce using rule 101 (element -> NOT element .)
    OF              reduce using rule 101 (element -> NOT element .)
    RANGE           reduce using rule 101 (element -> NOT element .)
    RPAREN          reduce using rule 101 (element -> NOT element .)
    SEMICOLON       reduce using rule 101 (element -> NOT element .)
    END             reduce using rule 101 (element -> NOT element .)
    UNTIL           reduce using rule 101 (element -> NOT element .)
    TO              reduce using rule 101 (element -> NOT element .)
    DOWNTO          reduce using rule 101 (element -> NOT element .)
    ELSE            reduce using rule 101 (element -> NOT element .)
    COMMA           reduce using rule 101 (element -> NOT element .)


state 128

    (95) length_function -> LENGTH LPAREN . expression RPAREN
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 156
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 129

    (35) statement_sequence -> statement SEMICOLON statement_sequence .

    END             reduce using rule 35 (statement_sequence -> statement SEMICOLON statement_sequence .)


state 130

    (74) assignment_statement -> ID ASSIGN expression .
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    SEMICOLON       reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    UNTIL           reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    TO              reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    DOWNTO          reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 74 (assignment_statement -> ID ASSIGN expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 131

    (63) procedure_or_function_call -> ID LPAREN param_list . RPAREN
    (65) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 157
    COMMA           shift and go to state 158


state 132

    (66) param_list -> param .

    RPAREN          reduce using rule 66 (param_list -> param .)
    COMMA           reduce using rule 66 (param_list -> param .)


state 133

    (67) param -> expression .
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RPAREN          reduce using rule 67 (param -> expression .)
    COMMA           reduce using rule 67 (param -> expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 134

    (68) if_statement -> IF expression THEN . statement ELSE statement
    (69) if_statement -> IF expression THEN . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 49 (statement -> .)
    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 159
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 135

    (70) while_statement -> WHILE expression DO . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 49 (statement -> .)
    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 160
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 136

    (71) repeat_statement -> REPEAT statement UNTIL . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 161
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 137

    (72) for_statement -> FOR assignment_statement TO . expression DO statement
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 162
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 138

    (73) for_statement -> FOR assignment_statement DOWNTO . expression DO statement
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 163
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 139

    (57) writeln_statement -> WRITELN LPAREN param_list . RPAREN
    (65) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 158


state 140

    (58) writeln_statement -> WRITELN LPAREN RPAREN .

    SEMICOLON       reduce using rule 58 (writeln_statement -> WRITELN LPAREN RPAREN .)
    END             reduce using rule 58 (writeln_statement -> WRITELN LPAREN RPAREN .)
    UNTIL           reduce using rule 58 (writeln_statement -> WRITELN LPAREN RPAREN .)
    ELSE            reduce using rule 58 (writeln_statement -> WRITELN LPAREN RPAREN .)


state 141

    (59) readln_statement -> READLN LPAREN id_list . RPAREN

    RPAREN          shift and go to state 165


state 142

    (60) readln_statement -> READLN LPAREN RPAREN .

    SEMICOLON       reduce using rule 60 (readln_statement -> READLN LPAREN RPAREN .)
    END             reduce using rule 60 (readln_statement -> READLN LPAREN RPAREN .)
    UNTIL           reduce using rule 60 (readln_statement -> READLN LPAREN RPAREN .)
    ELSE            reduce using rule 60 (readln_statement -> READLN LPAREN RPAREN .)


state 143

    (50) case_statement -> CASE expression OF . case_list END
    (51) case_list -> . case_option SEMICOLON case_list
    (52) case_list -> . case_option SEMICOLON
    (53) case_option -> . NUMBER COLON statement
    (54) case_option -> . BOOL COLON statement
    (55) case_option -> . PHRASE COLON statement
    (56) case_option -> . ID COLON statement

    NUMBER          shift and go to state 168
    BOOL            shift and go to state 169
    PHRASE          shift and go to state 170
    ID              shift and go to state 171

    case_list                      shift and go to state 166
    case_option                    shift and go to state 167

state 144

    (26) parameter -> ID COLON . type
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 172
    array_type                     shift and go to state 34

state 145

    (19) procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 19 (procedure_heading -> PROCEDURE ID LPAREN parameter_list RPAREN .)


state 146

    (24) parameter_list -> parameter COMMA . parameter_list
    (24) parameter_list -> . parameter COMMA parameter_list
    (25) parameter_list -> . parameter
    (26) parameter -> . ID COLON type

    ID              shift and go to state 99

    parameter                      shift and go to state 101
    parameter_list                 shift and go to state 173

state 147

    (23) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN . COLON type

    COLON           shift and go to state 174


state 148

    (32) array_type -> ARRAY LBRACKET range RBRACKET . OF type

    OF              shift and go to state 175


state 149

    (33) range -> expression RANGE . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    expression                     shift and go to state 176
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 150

    (103) element -> ID LBRACKET expression . RBRACKET
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RBRACKET        shift and go to state 177
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 151

    (12) id_list -> ID LBRACKET expression RBRACKET COMMA . id_list
    (9) id_list -> . ID
    (10) id_list -> . ID LBRACKET expression RBRACKET
    (11) id_list -> . ID COMMA id_list
    (12) id_list -> . ID LBRACKET expression RBRACKET COMMA id_list

    ID              shift and go to state 21

    id_list                        shift and go to state 178

state 152

    (75) expression -> expression and_or expression_m .
    (78) expression_m -> expression_m . sign expression_s
    (85) sign -> . PLUS
    (86) sign -> . MINUS
    (87) sign -> . DIV
    (88) sign -> . MOD
    (89) sign -> . EQUALS
    (90) sign -> . DIFFERENT
    (91) sign -> . LESSTHAN
    (92) sign -> . LESSEQUAL
    (93) sign -> . GREATERTHAN
    (94) sign -> . GREATEREQUAL

    RBRACKET        reduce using rule 75 (expression -> expression and_or expression_m .)
    AND             reduce using rule 75 (expression -> expression and_or expression_m .)
    OR              reduce using rule 75 (expression -> expression and_or expression_m .)
    THEN            reduce using rule 75 (expression -> expression and_or expression_m .)
    DO              reduce using rule 75 (expression -> expression and_or expression_m .)
    OF              reduce using rule 75 (expression -> expression and_or expression_m .)
    RANGE           reduce using rule 75 (expression -> expression and_or expression_m .)
    RPAREN          reduce using rule 75 (expression -> expression and_or expression_m .)
    SEMICOLON       reduce using rule 75 (expression -> expression and_or expression_m .)
    END             reduce using rule 75 (expression -> expression and_or expression_m .)
    UNTIL           reduce using rule 75 (expression -> expression and_or expression_m .)
    TO              reduce using rule 75 (expression -> expression and_or expression_m .)
    DOWNTO          reduce using rule 75 (expression -> expression and_or expression_m .)
    ELSE            reduce using rule 75 (expression -> expression and_or expression_m .)
    COMMA           reduce using rule 75 (expression -> expression and_or expression_m .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    DIV             shift and go to state 115
    MOD             shift and go to state 116
    EQUALS          shift and go to state 117
    DIFFERENT       shift and go to state 118
    LESSTHAN        shift and go to state 119
    LESSEQUAL       shift and go to state 120
    GREATERTHAN     shift and go to state 121
    GREATEREQUAL    shift and go to state 122

    sign                           shift and go to state 112

state 153

    (78) expression_m -> expression_m sign expression_s .
    (80) expression_s -> expression_s . psign element
    (83) psign -> . TIMES
    (84) psign -> . DIVIDE

    PLUS            reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    MINUS           reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    DIV             reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    MOD             reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    EQUALS          reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    DIFFERENT       reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    LESSTHAN        reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    LESSEQUAL       reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    GREATERTHAN     reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    GREATEREQUAL    reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    RBRACKET        reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    AND             reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    OR              reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    THEN            reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    DO              reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    OF              reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    RANGE           reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    RPAREN          reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    SEMICOLON       reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    END             reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    UNTIL           reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    TO              reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    DOWNTO          reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    ELSE            reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    COMMA           reduce using rule 78 (expression_m -> expression_m sign expression_s .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125

    psign                          shift and go to state 123

state 154

    (80) expression_s -> expression_s psign element .

    TIMES           reduce using rule 80 (expression_s -> expression_s psign element .)
    DIVIDE          reduce using rule 80 (expression_s -> expression_s psign element .)
    PLUS            reduce using rule 80 (expression_s -> expression_s psign element .)
    MINUS           reduce using rule 80 (expression_s -> expression_s psign element .)
    DIV             reduce using rule 80 (expression_s -> expression_s psign element .)
    MOD             reduce using rule 80 (expression_s -> expression_s psign element .)
    EQUALS          reduce using rule 80 (expression_s -> expression_s psign element .)
    DIFFERENT       reduce using rule 80 (expression_s -> expression_s psign element .)
    LESSTHAN        reduce using rule 80 (expression_s -> expression_s psign element .)
    LESSEQUAL       reduce using rule 80 (expression_s -> expression_s psign element .)
    GREATERTHAN     reduce using rule 80 (expression_s -> expression_s psign element .)
    GREATEREQUAL    reduce using rule 80 (expression_s -> expression_s psign element .)
    RBRACKET        reduce using rule 80 (expression_s -> expression_s psign element .)
    AND             reduce using rule 80 (expression_s -> expression_s psign element .)
    OR              reduce using rule 80 (expression_s -> expression_s psign element .)
    THEN            reduce using rule 80 (expression_s -> expression_s psign element .)
    DO              reduce using rule 80 (expression_s -> expression_s psign element .)
    OF              reduce using rule 80 (expression_s -> expression_s psign element .)
    RANGE           reduce using rule 80 (expression_s -> expression_s psign element .)
    RPAREN          reduce using rule 80 (expression_s -> expression_s psign element .)
    SEMICOLON       reduce using rule 80 (expression_s -> expression_s psign element .)
    END             reduce using rule 80 (expression_s -> expression_s psign element .)
    UNTIL           reduce using rule 80 (expression_s -> expression_s psign element .)
    TO              reduce using rule 80 (expression_s -> expression_s psign element .)
    DOWNTO          reduce using rule 80 (expression_s -> expression_s psign element .)
    ELSE            reduce using rule 80 (expression_s -> expression_s psign element .)
    COMMA           reduce using rule 80 (expression_s -> expression_s psign element .)


state 155

    (100) element -> LPAREN expression RPAREN .

    TIMES           reduce using rule 100 (element -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 100 (element -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 100 (element -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 100 (element -> LPAREN expression RPAREN .)
    DIV             reduce using rule 100 (element -> LPAREN expression RPAREN .)
    MOD             reduce using rule 100 (element -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 100 (element -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 100 (element -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 100 (element -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 100 (element -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 100 (element -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 100 (element -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 100 (element -> LPAREN expression RPAREN .)
    AND             reduce using rule 100 (element -> LPAREN expression RPAREN .)
    OR              reduce using rule 100 (element -> LPAREN expression RPAREN .)
    THEN            reduce using rule 100 (element -> LPAREN expression RPAREN .)
    DO              reduce using rule 100 (element -> LPAREN expression RPAREN .)
    OF              reduce using rule 100 (element -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 100 (element -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 100 (element -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 100 (element -> LPAREN expression RPAREN .)
    END             reduce using rule 100 (element -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 100 (element -> LPAREN expression RPAREN .)
    TO              reduce using rule 100 (element -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 100 (element -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 100 (element -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 100 (element -> LPAREN expression RPAREN .)


state 156

    (95) length_function -> LENGTH LPAREN expression . RPAREN
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RPAREN          shift and go to state 179
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 157

    (63) procedure_or_function_call -> ID LPAREN param_list RPAREN .

    SEMICOLON       reduce using rule 63 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    END             reduce using rule 63 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    UNTIL           reduce using rule 63 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)
    ELSE            reduce using rule 63 (procedure_or_function_call -> ID LPAREN param_list RPAREN .)


state 158

    (65) param_list -> param_list COMMA . param
    (67) param -> . expression
    (75) expression -> . expression and_or expression_m
    (76) expression -> . expression_m
    (77) expression_m -> . expression_s
    (78) expression_m -> . expression_m sign expression_s
    (79) expression_s -> . element
    (80) expression_s -> . expression_s psign element
    (96) element -> . ID
    (97) element -> . NUMBER
    (98) element -> . BOOL
    (99) element -> . PHRASE
    (100) element -> . LPAREN expression RPAREN
    (101) element -> . NOT element
    (102) element -> . length_function
    (103) element -> . ID LBRACKET expression RBRACKET
    (95) length_function -> . LENGTH LPAREN expression RPAREN

    ID              shift and go to state 72
    NUMBER          shift and go to state 77
    BOOL            shift and go to state 78
    PHRASE          shift and go to state 79
    LPAREN          shift and go to state 80
    NOT             shift and go to state 81
    LENGTH          shift and go to state 83

    param                          shift and go to state 180
    expression                     shift and go to state 133
    expression_m                   shift and go to state 74
    expression_s                   shift and go to state 75
    element                        shift and go to state 76
    length_function                shift and go to state 82

state 159

    (68) if_statement -> IF expression THEN statement . ELSE statement
    (69) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 181
    SEMICOLON       reduce using rule 69 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 69 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 69 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 69 (if_statement -> IF expression THEN statement .) ]


state 160

    (70) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 70 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 70 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 70 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 70 (while_statement -> WHILE expression DO statement .)


state 161

    (71) repeat_statement -> REPEAT statement UNTIL expression .
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    SEMICOLON       reduce using rule 71 (repeat_statement -> REPEAT statement UNTIL expression .)
    END             reduce using rule 71 (repeat_statement -> REPEAT statement UNTIL expression .)
    UNTIL           reduce using rule 71 (repeat_statement -> REPEAT statement UNTIL expression .)
    ELSE            reduce using rule 71 (repeat_statement -> REPEAT statement UNTIL expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 162

    (72) for_statement -> FOR assignment_statement TO expression . DO statement
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    DO              shift and go to state 182
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 163

    (73) for_statement -> FOR assignment_statement DOWNTO expression . DO statement
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    DO              shift and go to state 183
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 164

    (57) writeln_statement -> WRITELN LPAREN param_list RPAREN .

    SEMICOLON       reduce using rule 57 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    END             reduce using rule 57 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    UNTIL           reduce using rule 57 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)
    ELSE            reduce using rule 57 (writeln_statement -> WRITELN LPAREN param_list RPAREN .)


state 165

    (59) readln_statement -> READLN LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 59 (readln_statement -> READLN LPAREN id_list RPAREN .)
    END             reduce using rule 59 (readln_statement -> READLN LPAREN id_list RPAREN .)
    UNTIL           reduce using rule 59 (readln_statement -> READLN LPAREN id_list RPAREN .)
    ELSE            reduce using rule 59 (readln_statement -> READLN LPAREN id_list RPAREN .)


state 166

    (50) case_statement -> CASE expression OF case_list . END

    END             shift and go to state 184


state 167

    (51) case_list -> case_option . SEMICOLON case_list
    (52) case_list -> case_option . SEMICOLON

    SEMICOLON       shift and go to state 185


state 168

    (53) case_option -> NUMBER . COLON statement

    COLON           shift and go to state 186


state 169

    (54) case_option -> BOOL . COLON statement

    COLON           shift and go to state 187


state 170

    (55) case_option -> PHRASE . COLON statement

    COLON           shift and go to state 188


state 171

    (56) case_option -> ID . COLON statement

    COLON           shift and go to state 189


state 172

    (26) parameter -> ID COLON type .

    COMMA           reduce using rule 26 (parameter -> ID COLON type .)
    RPAREN          reduce using rule 26 (parameter -> ID COLON type .)


state 173

    (24) parameter_list -> parameter COMMA parameter_list .

    RPAREN          reduce using rule 24 (parameter_list -> parameter COMMA parameter_list .)


state 174

    (23) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON . type
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 190
    array_type                     shift and go to state 34

state 175

    (32) array_type -> ARRAY LBRACKET range RBRACKET OF . type
    (27) type -> . REAL
    (28) type -> . INTEGER
    (29) type -> . BOOLEAN
    (30) type -> . STRING
    (31) type -> . array_type
    (32) array_type -> . ARRAY LBRACKET range RBRACKET OF type

    REAL            shift and go to state 30
    INTEGER         shift and go to state 31
    BOOLEAN         shift and go to state 32
    STRING          shift and go to state 33
    ARRAY           shift and go to state 35

    type                           shift and go to state 191
    array_type                     shift and go to state 34

state 176

    (33) range -> expression RANGE expression .
    (75) expression -> expression . and_or expression_m
    (81) and_or -> . AND
    (82) and_or -> . OR

    RBRACKET        reduce using rule 33 (range -> expression RANGE expression .)
    AND             shift and go to state 110
    OR              shift and go to state 111

    and_or                         shift and go to state 109

state 177

    (103) element -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    OF              reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 103 (element -> ID LBRACKET expression RBRACKET .)


state 178

    (12) id_list -> ID LBRACKET expression RBRACKET COMMA id_list .

    COLON           reduce using rule 12 (id_list -> ID LBRACKET expression RBRACKET COMMA id_list .)
    RPAREN          reduce using rule 12 (id_list -> ID LBRACKET expression RBRACKET COMMA id_list .)


state 179

    (95) length_function -> LENGTH LPAREN expression RPAREN .

    TIMES           reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    PLUS            reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    MINUS           reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIV             reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    MOD             reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    EQUALS          reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    AND             reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    OR              reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    THEN            reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    DO              reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    OF              reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    RANGE           reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    RPAREN          reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    END             reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    UNTIL           reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    TO              reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    ELSE            reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)
    COMMA           reduce using rule 95 (length_function -> LENGTH LPAREN expression RPAREN .)


state 180

    (65) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 65 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 65 (param_list -> param_list COMMA param .)


state 181

    (68) if_statement -> IF expression THEN statement ELSE . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 49 (statement -> .)
    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 192
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 182

    (72) for_statement -> FOR assignment_statement TO expression DO . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 49 (statement -> .)
    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    assignment_statement           shift and go to state 42
    statement                      shift and go to state 193
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 183

    (73) for_statement -> FOR assignment_statement DOWNTO expression DO . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    ELSE            reduce using rule 49 (statement -> .)
    SEMICOLON       reduce using rule 49 (statement -> .)
    END             reduce using rule 49 (statement -> .)
    UNTIL           reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    assignment_statement           shift and go to state 42
    statement                      shift and go to state 194
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 184

    (50) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 50 (case_statement -> CASE expression OF case_list END .)
    END             reduce using rule 50 (case_statement -> CASE expression OF case_list END .)
    UNTIL           reduce using rule 50 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 50 (case_statement -> CASE expression OF case_list END .)


state 185

    (51) case_list -> case_option SEMICOLON . case_list
    (52) case_list -> case_option SEMICOLON .
    (51) case_list -> . case_option SEMICOLON case_list
    (52) case_list -> . case_option SEMICOLON
    (53) case_option -> . NUMBER COLON statement
    (54) case_option -> . BOOL COLON statement
    (55) case_option -> . PHRASE COLON statement
    (56) case_option -> . ID COLON statement

    END             reduce using rule 52 (case_list -> case_option SEMICOLON .)
    NUMBER          shift and go to state 168
    BOOL            shift and go to state 169
    PHRASE          shift and go to state 170
    ID              shift and go to state 171

    case_option                    shift and go to state 167
    case_list                      shift and go to state 195

state 186

    (53) case_option -> NUMBER COLON . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 196
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 187

    (54) case_option -> BOOL COLON . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 197
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 188

    (55) case_option -> PHRASE COLON . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 198
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 189

    (56) case_option -> ID COLON . statement
    (37) statement -> . assignment_statement
    (38) statement -> . statement_part
    (39) statement -> . if_statement
    (40) statement -> . while_statement
    (41) statement -> . repeat_statement
    (42) statement -> . for_statement
    (43) statement -> . procedure_or_function_call
    (44) statement -> . writeln_statement
    (45) statement -> . readln_statement
    (46) statement -> . break_statement
    (47) statement -> . continue_statement
    (48) statement -> . case_statement
    (49) statement -> .
    (74) assignment_statement -> . ID ASSIGN expression
    (34) statement_part -> . BEGIN statement_sequence END
    (68) if_statement -> . IF expression THEN statement ELSE statement
    (69) if_statement -> . IF expression THEN statement
    (70) while_statement -> . WHILE expression DO statement
    (71) repeat_statement -> . REPEAT statement UNTIL expression
    (72) for_statement -> . FOR assignment_statement TO expression DO statement
    (73) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (63) procedure_or_function_call -> . ID LPAREN param_list RPAREN
    (64) procedure_or_function_call -> . ID
    (57) writeln_statement -> . WRITELN LPAREN param_list RPAREN
    (58) writeln_statement -> . WRITELN LPAREN RPAREN
    (59) readln_statement -> . READLN LPAREN id_list RPAREN
    (60) readln_statement -> . READLN LPAREN RPAREN
    (61) break_statement -> . BREAK SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (50) case_statement -> . CASE expression OF case_list END

    SEMICOLON       reduce using rule 49 (statement -> .)
    ID              shift and go to state 54
    BEGIN           shift and go to state 23
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    REPEAT          shift and go to state 57
    FOR             shift and go to state 58
    WRITELN         shift and go to state 59
    READLN          shift and go to state 60
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 62
    CASE            shift and go to state 63

    statement                      shift and go to state 199
    assignment_statement           shift and go to state 42
    statement_part                 shift and go to state 43
    if_statement                   shift and go to state 44
    while_statement                shift and go to state 45
    repeat_statement               shift and go to state 46
    for_statement                  shift and go to state 47
    procedure_or_function_call     shift and go to state 48
    writeln_statement              shift and go to state 49
    readln_statement               shift and go to state 50
    break_statement                shift and go to state 51
    continue_statement             shift and go to state 52
    case_statement                 shift and go to state 53

state 190

    (23) function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .

    SEMICOLON       reduce using rule 23 (function_heading -> FUNCTION ID LPAREN parameter_list RPAREN COLON type .)


state 191

    (32) array_type -> ARRAY LBRACKET range RBRACKET OF type .

    SEMICOLON       reduce using rule 32 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    COMMA           reduce using rule 32 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)
    RPAREN          reduce using rule 32 (array_type -> ARRAY LBRACKET range RBRACKET OF type .)


state 192

    (68) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 68 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 68 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 68 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 68 (if_statement -> IF expression THEN statement ELSE statement .)


state 193

    (72) for_statement -> FOR assignment_statement TO expression DO statement .

    SEMICOLON       reduce using rule 72 (for_statement -> FOR assignment_statement TO expression DO statement .)
    END             reduce using rule 72 (for_statement -> FOR assignment_statement TO expression DO statement .)
    UNTIL           reduce using rule 72 (for_statement -> FOR assignment_statement TO expression DO statement .)
    ELSE            reduce using rule 72 (for_statement -> FOR assignment_statement TO expression DO statement .)


state 194

    (73) for_statement -> FOR assignment_statement DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 73 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    END             reduce using rule 73 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    UNTIL           reduce using rule 73 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    ELSE            reduce using rule 73 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)


state 195

    (51) case_list -> case_option SEMICOLON case_list .

    END             reduce using rule 51 (case_list -> case_option SEMICOLON case_list .)


state 196

    (53) case_option -> NUMBER COLON statement .

    SEMICOLON       reduce using rule 53 (case_option -> NUMBER COLON statement .)


state 197

    (54) case_option -> BOOL COLON statement .

    SEMICOLON       reduce using rule 54 (case_option -> BOOL COLON statement .)


state 198

    (55) case_option -> PHRASE COLON statement .

    SEMICOLON       reduce using rule 55 (case_option -> PHRASE COLON statement .)


state 199

    (56) case_option -> ID COLON statement .

    SEMICOLON       reduce using rule 56 (case_option -> ID COLON statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 159 resolved as shift
